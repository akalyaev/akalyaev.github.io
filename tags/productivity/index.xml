<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Productivity on Home on Rails</title>
    <link>http://homeonrails.com/tags/productivity/index.xml</link>
    <description>Recent content in Productivity on Home on Rails</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>All rights reserved - 2017</copyright>
    <atom:link href="http://homeonrails.com/tags/productivity/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>5 New Tab Google Chrome extensions for productivity freaks</title>
      <link>http://homeonrails.com/2016/10/5-new-tab-google-chrome-extensions-for-productivity-freaks/</link>
      <pubDate>Tue, 18 Oct 2016 17:40:16 +0000</pubDate>
      
      <guid>http://homeonrails.com/2016/10/5-new-tab-google-chrome-extensions-for-productivity-freaks/</guid>
      <description>&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;1-mortality&#34;&gt;1. Mortality&lt;/h2&gt;

&lt;p&gt;&lt;img class=&#34;img-rounded&#34; src=&#34;http://homeonrails.com/images/posts/2016-10-18-5-new-tab-google-chrome-extensions-for-productivity-freaks/mortality.jpg&#34; alt=&#34;&#34; width=&#34;100%&#34; title=&#34;&#34;/&gt;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Mortality is a new tab extension that reminds you of your precise age. A
bitter-sweet motivational tool; it illustrates how little time we have. Circles
represent months, for the average lifespan of 80 years. As you age, the circles
fill, and are split into the main Chapters of your life.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;My current one. Highly motivating.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://chrome.google.com/webstore/detail/mortality-new-tab/eeedcpdcehnikgkhbobmkjcipjhlbmpn&#34;&gt;https://chrome.google.com/webstore/detail/mortality-new-tab/eeedcpdcehnikgkhbobmkjcipjhlbmpn&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-motivation&#34;&gt;2. Motivation&lt;/h2&gt;

&lt;p&gt;&lt;img class=&#34;img-rounded&#34; src=&#34;http://homeonrails.com/images/posts/2016-10-18-5-new-tab-google-chrome-extensions-for-productivity-freaks/motivation.gif&#34; alt=&#34;&#34; width=&#34;100%&#34; title=&#34;&#34;/&gt;&lt;/p&gt;

&lt;p&gt;If Mortality is too much for you, try this small extension. &lt;strong&gt;Just a counter&lt;/strong&gt;,
nothing more.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://chrome.google.com/webstore/detail/motivation/ofdgfpchbidcgncgfpdlpclnpaemakoj&#34;&gt;https://chrome.google.com/webstore/detail/motivation/ofdgfpchbidcgncgfpdlpclnpaemakoj&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;3-dayboard-new-tab-page&#34;&gt;3. Dayboard - New Tab Page&lt;/h2&gt;

&lt;p&gt;&lt;img class=&#34;img-rounded&#34; src=&#34;http://homeonrails.com/images/posts/2016-10-18-5-new-tab-google-chrome-extensions-for-productivity-freaks/dayboard.jpg&#34; alt=&#34;&#34; width=&#34;100%&#34; title=&#34;&#34;/&gt;&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/VHfWzt94tVQ&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;strong&gt;ToDo list&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Focus mode allow you to focus on a particular task. In some way, it combines
Momentum and Wunderlist together, but lacks Momentum&amp;rsquo;s wallpaper and Wunderlist
sync.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://chrome.google.com/webstore/detail/dayboard-new-tab-page/kimodcegbhclamjcbifgfaldeengbgij&#34;&gt;https://chrome.google.com/webstore/detail/dayboard-new-tab-page/kimodcegbhclamjcbifgfaldeengbgij&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;4-wunderlist-new-tab&#34;&gt;4. Wunderlist New Tab&lt;/h2&gt;

&lt;p&gt;&lt;img class=&#34;img-rounded&#34; src=&#34;http://homeonrails.com/images/posts/2016-10-18-5-new-tab-google-chrome-extensions-for-productivity-freaks/wunderlist.jpg&#34; alt=&#34;&#34; width=&#34;100%&#34; title=&#34;&#34;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ToDo list with a background&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://chrome.google.com/webstore/detail/wunderlist-new-tab/fgikemaeelgbhjnhnnahcpkjpafaeion?hl=en&#34;&gt;https://chrome.google.com/webstore/detail/wunderlist-new-tab/fgikemaeelgbhjnhnnahcpkjpafaeion?hl=en&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;5-momentum&#34;&gt;5. Momentum&lt;/h2&gt;

&lt;p&gt;&lt;img class=&#34;img-rounded&#34; src=&#34;http://homeonrails.com/images/posts/2016-10-18-5-new-tab-google-chrome-extensions-for-productivity-freaks/momentum.png&#34; alt=&#34;&#34; width=&#34;100%&#34; title=&#34;&#34;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Personal dashboard&lt;/strong&gt; with a different wallpaper every day, ability to set a daily
goal and other features. There is a new extension,
&lt;a href=&#34;https://chrome.google.com/webstore/detail/leoh-new-tab/ijhhakihjccpanbibbcceofpjnebokcb&#34;&gt;Leoh&lt;/a&gt;,
which is similar to Momentum, but more minimalistic and streamlined.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://chrome.google.com/webstore/detail/momentum/laookkfknpbbblfpciffpaejjkokdgca&#34;&gt;https://chrome.google.com/webstore/detail/momentum/laookkfknpbbblfpciffpaejjkokdgca&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope you will find something for you. Cheers!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to be productive with almost any text editor</title>
      <link>http://homeonrails.com/2016/05/how-to-be-productive-with-almost-any-editor/</link>
      <pubDate>Mon, 23 May 2016 12:02:11 +0000</pubDate>
      
      <guid>http://homeonrails.com/2016/05/how-to-be-productive-with-almost-any-editor/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://homeonrails.com/pdfs/posts/2016-05-23-how-to-be-productive-with-almost-any-editor/how_to_be_productive_with_almost_any_editor_ru_RU.pdf&#34; title=&#34;Скачать PDF на русском&#34;&gt;
  На русском
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What makes us productive when working with code in the editor? Every day, there
is a new shining plugin, that allows us to do something useful by pressing only
2 keystrokes. Don&amp;rsquo;t get me wrong, I&amp;rsquo;m not against plugins. Hell, I have at
least 40 of them (&lt;a href=&#34;https://git.io/vrg64&#34;&gt;https://git.io/vrg64&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;But, are all of them equally useful? I am certain that some tricks outperform
others in terms of productivity (&lt;strong&gt;20% results in 80% boost&lt;/strong&gt;). These could be
features, built into the editor. You just don&amp;rsquo;t know about them. Here, I&amp;rsquo;ve
tried to collect &lt;strong&gt;the most important ones&lt;/strong&gt;, which don&amp;rsquo;t require you to read a
pile of docs and much time to learn.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;There is no research (not to my knowledge) to backup the list below. If you
think I missed something, leave a comment or two.&lt;/p&gt;

&lt;p&gt;In addition, I&amp;rsquo;ve compared the 5 most popular editors (vim, emacs, idea,
sublime text and atom). I hope it will be interesting for you to see how your
editor is doing relative to others.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;img-rounded&#34; src=&#34;http://homeonrails.com/images/posts/2016-05-23-how-to-be-productive-with-almost-any-editor/trends.png&#34; alt=&#34;&#34; width=&#34;100%&#34; title=&#34;&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Your humble servant is using Vim at his regular job, so you may notice a
certain predisposition. But I try to be open - the second attempt to master
Spacemacs? &lt;a href=&#34;https://github.com/google/xi-editor&#34;&gt;https://github.com/google/xi-editor&lt;/a&gt; ? Who knows..&lt;/p&gt;

&lt;h2 id=&#34;1-fast-switching-between-the-last-two-files&#34;&gt;1. Fast switching between the last two files&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Editor&lt;/th&gt;
&lt;th&gt;Mapping&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Vim&lt;/td&gt;
&lt;td&gt;&lt;code&gt;nnoremap &amp;lt;leader&amp;gt;&amp;lt;leader&amp;gt; &amp;lt;C-^&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Emacs&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(global-set-key (kbd &amp;quot;M-o&amp;quot;)  &#39;mode-line-other-buffer)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Idea&lt;/td&gt;
&lt;td&gt;Ctrl + Tab / Ctrl + Shift + Tab&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Sublime Text&lt;/td&gt;
&lt;td&gt;Ctrl + Tab / Ctrl + Shift + Tab&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Atom&lt;/td&gt;
&lt;td&gt;Ctrl + Tab / Ctrl + Shift + Tab&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Emacs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.emacswiki.org/emacs/SwitchingBuffers#toc5&#34;&gt;https://www.emacswiki.org/emacs/SwitchingBuffers#toc5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://emacsredux.com/blog/2013/04/28/switch-to-previous-buffer/&#34;&gt;http://emacsredux.com/blog/2013/04/28/switch-to-previous-buffer/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Idea:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.jetbrains.com/webide/2013/02/navigating-between-files-in-the-ide-best-practices/&#34;&gt;http://blog.jetbrains.com/webide/2013/02/navigating-between-files-in-the-ide-best-practices/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;2-running-tests-without-leaving-the-editor&#34;&gt;2. Running tests without leaving the editor&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Editor&lt;/th&gt;
&lt;th&gt;The way&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Vim&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/janko-m/vim-test&#34;&gt;https://github.com/janko-m/vim-test&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Emacs&lt;/td&gt;
&lt;td&gt;no uniform interface, but there are packages for different languages&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Idea&lt;/td&gt;
&lt;td&gt;through the UI plus Ctrl + R to restart&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Sublime Text&lt;/td&gt;
&lt;td&gt;no uniform interface, but there are packages for different languages&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Atom&lt;/td&gt;
&lt;td&gt;no uniform interface, but there are packages for different languages&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Emacs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;clojure - &lt;a href=&#34;https://github.com/clojure-emacs/cider&#34;&gt;https://github.com/clojure-emacs/cider&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ruby - &lt;a href=&#34;https://github.com/pezra/rspec-mode&#34;&gt;https://github.com/pezra/rspec-mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;erlang - &lt;a href=&#34;https://github.com/tjarvstrand/edts&#34;&gt;https://github.com/tjarvstrand/edts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;python - &lt;a href=&#34;https://github.com/ionrock/pytest-el&#34;&gt;https://github.com/ionrock/pytest-el&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;golang - &lt;a href=&#34;https://github.com/nlamirault/gotest.el&#34;&gt;https://github.com/nlamirault/gotest.el&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Idea:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;for some languages, you&amp;rsquo;ll need to configure Idea, e.g. golang - &lt;a href=&#34;https://github.com/go-lang-plugin-org/go-lang-idea-plugin/wiki/Documentation&#34;&gt;https://github.com/go-lang-plugin-org/go-lang-idea-plugin/wiki/Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.1/rerunning-tests.html&#34;&gt;https://www.jetbrains.com/help/idea/2016.1/rerunning-tests.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sublime Text:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ruby - &lt;a href=&#34;https://github.com/maltize/sublime-text-2-ruby-tests&#34;&gt;https://github.com/maltize/sublime-text-2-ruby-tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;python - &lt;a href=&#34;https://damnwidget.github.io/anaconda/tests_runner/&#34;&gt;https://damnwidget.github.io/anaconda/tests_runner/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;scala - &lt;a href=&#34;https://github.com/jarhart/SublimeSBT&#34;&gt;https://github.com/jarhart/SublimeSBT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Atom:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ruby - &lt;a href=&#34;https://github.com/moxley/atom-ruby-test&#34;&gt;https://github.com/moxley/atom-ruby-test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;elixir - &lt;a href=&#34;https://github.com/indiejames/atom-iex&#34;&gt;https://github.com/indiejames/atom-iex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(many) - &lt;a href=&#34;https://atom.io/packages/script&#34;&gt;https://atom.io/packages/script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://brendankemp.com/essays/atom-is-ready-to-be-your-editor/&#34;&gt;http://brendankemp.com/essays/atom-is-ready-to-be-your-editor/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;3-terminal-emulator&#34;&gt;3. Terminal emulator&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Editor&lt;/th&gt;
&lt;th&gt;Terminal emulator&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Vim&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;/td&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Neovim&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;/td&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Emacs&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;/td&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Idea&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;/td&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Sublime Text&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;/td&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Atom&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;em&gt;Note on terminal text editors&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can easily switch to the actual terminal using Ctrl + z (this will suspend
the editor) and get back by entering fg. However, I would say that it is not
the same as having a terminal emulator running in an editor&amp;rsquo;s window below. The
reason is simple - context. Most often, &lt;strong&gt;you&amp;rsquo;ll want to look at the output of
some command and the code at the same time&lt;/strong&gt;. For example, seeing an error&amp;rsquo;s
stack trace and the code at the same time is far better than performing these
actions in turn (you could easily forget the exact line number or some other
detail).&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t want to type fg, there is a hack:&lt;/p&gt;

&lt;p&gt;zsh: &lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh/blob/master/plugins/fancy-ctrl-z/fancy-ctrl-z.plugin.zsh&#34;&gt;https://github.com/robbyrussell/oh-my-zsh/blob/master/plugins/fancy-ctrl-z/fancy-ctrl-z.plugin.zsh&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;fish:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bind \ck &#39;if test -z (commandline) ; fg %; else ; clear; commandline &amp;quot;&amp;quot;; end&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another advantage of having a terminal emulator: copy-pasting between the
terminal emulator and your code is much easier, and you &lt;strong&gt;get completion in the
code for things in the terminal&lt;/strong&gt; (thanks to
&lt;a href=&#34;https://www.reddit.com/user/somebodddy&#34;&gt;somebodddy&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Sublime Text: &lt;a href=&#34;https://packagecontrol.io/packages/Terminal&#34;&gt;https://packagecontrol.io/packages/Terminal&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Atom: &lt;a href=&#34;https://atom.io/packages/term3&#34;&gt;https://atom.io/packages/term3&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;4-go-to-definition&#34;&gt;4. Go to definition&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Editor&lt;/th&gt;
&lt;th&gt;Mapping&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Vim&lt;/td&gt;
&lt;td&gt;Ctrl + ] / Ctrl - T using ctags&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Emacs&lt;/td&gt;
&lt;td&gt;M-. / M-* using ctags&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Idea&lt;/td&gt;
&lt;td&gt;Ctrl + B or Ctrl + click / Ctrl + Tab&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Sublime Text&lt;/td&gt;
&lt;td&gt;Ctrl + click / Ctrl + right click&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Atom&lt;/td&gt;
&lt;td&gt;Ctrl + Alt + down / Ctrl + Alt + up&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Emacs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.emacswiki.org/emacs/EmacsTags&#34;&gt;https://www.emacswiki.org/emacs/EmacsTags&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jacktasia/dumb-jump&#34;&gt;https://github.com/jacktasia/dumb-jump&lt;/a&gt; (uses &lt;code&gt;ag&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sublime Text: &lt;a href=&#34;https://gist.github.com/kendellfab/6135193#gistcomment-1768760&#34;&gt;https://gist.github.com/kendellfab/6135193#gistcomment-1768760&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Atom: &lt;a href=&#34;https://github.com/atom/symbols-view&#34;&gt;https://github.com/atom/symbols-view&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Generating tags using git hooks: &lt;a href=&#34;http://tbaggery.com/2011/08/08/effortless-ctags-with-git.html&#34;&gt;http://tbaggery.com/2011/08/08/effortless-ctags-with-git.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;5-repl-advanced&#34;&gt;5. REPL (Advanced)&lt;/h2&gt;

&lt;p&gt;If you have a REPL alongside the editor - excellent! You can eval some code or
lookup some documentation (&lt;a href=&#34;http://tonsky.me/blog/interactive-development/&#34;&gt;http://tonsky.me/blog/interactive-development/&lt;/a&gt;).&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Editor&lt;/th&gt;
&lt;th&gt;REPL&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Vim&lt;/td&gt;
&lt;td&gt;yes (few languages)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Neovim&lt;/td&gt;
&lt;td&gt;yes (many languages)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Emacs&lt;/td&gt;
&lt;td&gt;yes (many languages)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Idea&lt;/td&gt;
&lt;td&gt;yes (many languages)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Sublime Text&lt;/td&gt;
&lt;td&gt;yes (many languages)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Atom&lt;/td&gt;
&lt;td&gt;yes (few languages)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Vim:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;clojure: &lt;a href=&#34;https://github.com/tpope/vim-fireplace&#34;&gt;https://github.com/tpope/vim-fireplace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If language has a command-line REPL, you can always execute: &lt;code&gt;:!&amp;lt;repl&amp;gt;&lt;/code&gt; (e.g. &lt;code&gt;:!irb&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Neovim: &lt;a href=&#34;https://github.com/kassio/neoterm&#34;&gt;https://github.com/kassio/neoterm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Emacs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ruby - &lt;a href=&#34;https://github.com/dgutov/robe&#34;&gt;https://github.com/dgutov/robe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;scala - &lt;a href=&#34;https://github.com/ensime/ensime-emacs&#34;&gt;https://github.com/ensime/ensime-emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;clojure - &lt;a href=&#34;https://github.com/clojure-emacs/cider&#34;&gt;https://github.com/clojure-emacs/cider&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Idea:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;clojure - &lt;a href=&#34;https://cursive-ide.com/&#34;&gt;https://cursive-ide.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sublime Text: &lt;a href=&#34;https://packagecontrol.io/packages/SublimeREPL&#34;&gt;https://packagecontrol.io/packages/SublimeREPL&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Atom:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;clojure - &lt;a href=&#34;https://atom.io/packages/proto-repl&#34;&gt;https://atom.io/packages/proto-repl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;haskell - &lt;a href=&#34;https://atom.io/packages/ide-haskell-repl&#34;&gt;https://atom.io/packages/ide-haskell-repl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;the-end-list&#34;&gt;The end list&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Fast switching between the last two files&lt;/li&gt;
&lt;li&gt;Running tests without leaving the editor&lt;/li&gt;
&lt;li&gt;Terminal emulator&lt;/li&gt;
&lt;li&gt;Go to definition&lt;/li&gt;
&lt;li&gt;REPL (Advanced)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;3 and 5 could be alternatively solved using a terminal multiplexer. For
example, my favorite &lt;a href=&#34;https://tmux.github.io/&#34;&gt;https://tmux.github.io/&lt;/a&gt; .&lt;/p&gt;

&lt;h2 id=&#34;bonus&#34;&gt;Bonus&lt;/h2&gt;

&lt;p&gt;1) Do not repeat yourself (&amp;ldquo;.&amp;rdquo; in Vim, macros [atom - &lt;a href=&#34;https://atom.io/packages/atom-keyboard-macros]&#34;&gt;https://atom.io/packages/atom-keyboard-macros]&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;2) Operate on objects: blocks, functions, etc., not individual characters (motions and text objects &lt;a href=&#34;https://github.com/kana/vim-textobj-user/wiki&#34;&gt;https://github.com/kana/vim-textobj-user/wiki&lt;/a&gt; in Vim)&lt;/p&gt;

&lt;p&gt;3) Quickly navigate through code using AceJump-like plugins&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;vim - &lt;a href=&#34;https://github.com/easymotion/vim-easymotion&#34;&gt;https://github.com/easymotion/vim-easymotion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;idea - &lt;a href=&#34;https://github.com/johnlindquist/AceJump&#34;&gt;https://github.com/johnlindquist/AceJump&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;emacs - &lt;a href=&#34;https://github.com/abo-abo/avy&#34;&gt;https://github.com/abo-abo/avy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;sublime text - &lt;a href=&#34;https://packagecontrol.io/packages/EasyMotion&#34;&gt;https://packagecontrol.io/packages/EasyMotion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;atom - &lt;a href=&#34;https://atom.io/packages/jumpy&#34;&gt;https://atom.io/packages/jumpy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My current use of &lt;code&gt;vim-easymotion&lt;/code&gt; reduced to only one &lt;a href=&#34;https://git.io/vrzAE&#34;&gt;https://git.io/vrzAE&lt;/a&gt;
mapping that allows me to jump to any location in the current file. Simple and
effective!&lt;/p&gt;

&lt;p&gt;4) Use multiple selection/cursors&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;vim - &lt;a href=&#34;https://github.com/terryma/vim-multiple-cursors&#34;&gt;https://github.com/terryma/vim-multiple-cursors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;idea - F6 and the rest&lt;/li&gt;
&lt;li&gt;emacs - &lt;a href=&#34;https://github.com/magnars/multiple-cursors.el&#34;&gt;https://github.com/magnars/multiple-cursors.el&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;sublime text - Ctrl + D&lt;/li&gt;
&lt;li&gt;atom - Ctrl + D&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;5) Open files using fuzzy search&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;vim - &lt;a href=&#34;https://github.com/junegunn/fzf.vim&#34;&gt;https://github.com/junegunn/fzf.vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;idea - Shift + Ctrl + O (&lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.1/navigating-to-class-file-or-symbol-by-name.html&#34;&gt;https://www.jetbrains.com/help/idea/2016.1/navigating-to-class-file-or-symbol-by-name.html&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;emacs - &lt;a href=&#34;https://github.com/bbatsov/projectile&#34;&gt;https://github.com/bbatsov/projectile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;sublime text - Ctrl + P (&lt;a href=&#34;http://docs.sublimetext.info/en/latest/file_management/file_management.html&#34;&gt;http://docs.sublimetext.info/en/latest/file_management/file_management.html&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;atom - &lt;a href=&#34;https://github.com/atom/fuzzy-finder&#34;&gt;https://github.com/atom/fuzzy-finder&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;As you can see, each of the editors does the job. Some slightly better, others
- a little worse.&lt;/p&gt;

&lt;p&gt;Another finding: Vim is best suited for polyglot developers
(&lt;a href=&#34;http://searchsoftwarequality.techtarget.com/definition/polyglot-programming&#34;&gt;http://searchsoftwarequality.techtarget.com/definition/polyglot-programming&lt;/a&gt;)
because it provides plugins and unified interface for multiple languages. Emacs
offers more power, but you need to configure all the packages to make mappings
the same. It may be a good idea for Spacemacs, is it?&lt;/p&gt;

&lt;p&gt;Useful links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://sheerun.net/2014/03/21/how-to-boost-your-vim-productivity/&#34;&gt;https://sheerun.net/2014/03/21/how-to-boost-your-vim-productivity/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://danielmiessler.com/blog/enhancements-to-shell-and-vim-productivity/&#34;&gt;https://danielmiessler.com/blog/enhancements-to-shell-and-vim-productivity/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Did I miss something? You can leave a comment or send me an email.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>10 команд, которыми вы пользуетесь чаще всего</title>
      <link>http://homeonrails.com/2013/07/top-10-commands-you-currently-use/</link>
      <pubDate>Sun, 28 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://homeonrails.com/2013/07/top-10-commands-you-currently-use/</guid>
      <description>&lt;p&gt;Порой, если вы активно пользуетесь командной строкой, вы начинаете
замечать, что набираете некоторые команды по многу раз. Неужели вам не
лень каждый раз набирать &lt;code&gt;vagrant up&lt;/code&gt; или &lt;code&gt;git checkout
feature/awesome-feature&lt;/code&gt;? Если да и вы стремитесь к повышению
продуктивности своей работы, то в командной оболочке linux есть отличное средство,
которое нам поможет - алиасы.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Сначала надо получить список наиболее часто используемых команд:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;history | awk &#39;{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] &amp;quot; &amp;quot; CMD[a]/count*100 &amp;quot;% &amp;quot; a;}&#39; | grep -v &amp;quot;./&amp;quot; | column -c3 -s &amp;quot; &amp;quot; -t | sort -nr | nl |  head -n10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;awk&lt;/code&gt; сохраняет команду и количество ее вхождений в
историю. Затем результат печатается, фильтруются скрипты вида
&lt;code&gt;./something&lt;/code&gt;, сортируется и обрезается до нужной длины.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://linux.byexamples.com/archives/332/what-is-your-10-common-linux-commands/&#34;&gt;Источник&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Пример вывода:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;13185  31.8532%   git
21430  14.3014%   gst
3706   7.301406071%   vim
4687   6.87069%   cd
5618   6.18062%   vagrant
6404   4.0404%    sudo
7252   2.52025%   tmux
8232   2.32023%   g
9197   1.9702%    ls
10190  1.90019%   gc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Основываясь на выводе выше, можно сказать что я очень часто пользуюсь
git, так что неплохо бы создать алиас для него и команд ниже.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;alias g=&amp;quot;git&amp;quot;
alias v=&amp;quot;vim&amp;quot;
alias l=&amp;quot;ls -al&amp;quot;
alias c=&amp;quot;git commit -m&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Мне очень нравятся однобуквенные алиасы. Хотя на многое их явно не
хватит.&lt;/p&gt;

&lt;p&gt;Также можно проанализировать только команды vagrant&amp;rsquo;а (subcommands) или любой
другой программы слегка модифицировав предыдущий скрипт:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;history|grep vagrant| awk &#39;{CMD[$3]++;count++;}END { for (a in CMD)print CMD[a] &amp;quot; &amp;quot; CMD[a]/count*100 &amp;quot;% &amp;quot; a;}&#39; | grep -v &amp;quot;./&amp;quot; | column -c3 -s &amp;quot; &amp;quot; -t | sort -nr | nl |  head -n10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Пример вывода:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1   193  23.9752%   ssh
2   166  20.6211%   up
3   98   12.1739%   halt
4   63   7.82609%   reload
5   37   4.59627%   destroy
6   31   3.85093%   TEAMOCIL=1;
7   18   2.23602%   provision
8   14   1.73913%   box
9   9    1.11801%   solo
10  8    0.993789%  -r
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Для vagrant мы заведем такой набор:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;alias v=&amp;quot;vagrant&amp;quot;
alias vst=&amp;quot;vagrant status&amp;quot;
alias vup=&amp;quot;vagrant up&amp;quot;
alias vpr=&amp;quot;vagrant provision&amp;quot;
alias vhl=&amp;quot;vagrant halt&amp;quot;
alias vre=&amp;quot;vagrant reload&amp;quot;
alias vssh=&amp;quot;vagrant ssh&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Если вы пользуетесь zsh, то рекомендую взглянуть на &lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh&#34;&gt;oh-my-zsh&lt;/a&gt;, которая
предлагает большое количесво плагинов с алиасами и автодополнением.
Конечно, они во многом избыточны (стоит хотя бы взглянуть на &lt;a href=&#34;http://jasonm23.github.io/oh-my-git-aliases.html&#34;&gt;список
команд плагина git&lt;/a&gt;), но если вас это устраивает, то можно смело их
использовать.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Как результат, мы повышаем продуктивность и, что немаловажно, снижаем нагрузку на наши
пальцы.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;P.S. очень рекомендую посмотреть доклад &lt;a href=&#34;http://www.youtube.com/watch?v=SkdrYWhh-8s&#34;&gt;Ben Orenstein - Write code faster: expert-level vim (Railsberry 2012)&lt;/a&gt;,
в котором Бен рассказывает очень правильные подходы в работе с vim&amp;rsquo;ом. Даже если вы не
пользуетесь vim&amp;rsquo;ом, многие вещи можно переложить на ваш любимый редактор, будь то Emacs, Sublime или любой другой.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>