<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Picks on Home on Rails</title>
    <link>http://homeonrails.com/tags/picks/index.xml</link>
    <description>Recent content in Picks on Home on Rails</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>All rights reserved - 2017</copyright>
    <atom:link href="http://homeonrails.com/tags/picks/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>December Picks</title>
      <link>http://homeonrails.com/2017/01/december-picks/</link>
      <pubDate>Sat, 07 Jan 2017 10:54:24 +0200</pubDate>
      
      <guid>http://homeonrails.com/2017/01/december-picks/</guid>
      <description>&lt;p&gt;&amp;ldquo;Random picks from all over the Internet&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ru&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;The CIA remotely accessed Russian hacker&amp;#39;s webcam moments before hack, first images have been revealed &lt;a href=&#34;https://t.co/RycQD8RYX1&#34;&gt;pic.twitter.com/RycQD8RYX1&lt;/a&gt;&lt;/p&gt;&amp;mdash; Science Cat (@DrScienceCat) &lt;a href=&#34;https://twitter.com/DrScienceCat/status/809473634259636225&#34;&gt;15 –¥–µ–∫–∞–±—Ä—è 2016 –≥.&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;english&#34;&gt;English&lt;/h2&gt;

&lt;h3 id=&#34;articles&#34;&gt;Articles&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://preshing.com/20120612/an-introduction-to-lock-free-programming/&#34;&gt;An Introduction to Lock-Free Programming&lt;/a&gt;
I don&amp;rsquo;t know much about you, but I always wanted to know what people mean by
lock-free programming. Here is the best article I was able to find.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://capnproto.org/news/2014-06-17-capnproto-flatbuffers-sbe.html&#34;&gt;Cap&amp;rsquo;n Proto, FlatBuffers, and SBE&lt;/a&gt;
What serialization protocol will you choose for your next project? Be aware
of the author&amp;rsquo;s bias towards his own solution (Cap&amp;rsquo;n Proto).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://ericdykstra.me/blog/improving-as-an-intermediate-programmer&#34;&gt;How Does One Improve as an Intermediate Programmer?&lt;/a&gt;
&amp;ldquo;Maybe the discipline is still too young to have formalized ways of
performance improvement like classical music training or sports training.&amp;rdquo; Do
you think it&amp;rsquo;s true? Personally, I tend to agree with Eric.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.bradfieldcs.com/in-2017-learn-every-language-59b11f68eee#.ib8fx7xzm&#34;&gt;In 2017, learn &lt;em&gt;every&lt;/em&gt; language&lt;/a&gt;
Do not have plans for 2017? How about learning &lt;em&gt;every&lt;/em&gt; language :)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://waitbutwhy.com/2014/06/taming-mammoth-let-peoples-opinions-run-life.html&#34;&gt;Taming the Mammoth: Why You Should Stop Caring What Other People Think&lt;/a&gt;
You&amp;rsquo;ve probably been told that many times, but it won&amp;rsquo;t hurt to read about
this problem again and you will find glorious pictures (as always with
waitbutwhy.com).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;videos&#34;&gt;Videos&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=3wyd6J3yjcs&#34;&gt;The Silver Bullet Syndrome by Hadi Hariri&lt;/a&gt;
This is probably the second funniest dev talk after the famous &amp;ldquo;Wat&amp;rdquo; talk by
Gary Bernhardt. Must watch!&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/3wyd6J3yjcs&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=rX0ItVEVjHc&#34;&gt;CppCon 2014: Mike Acton &amp;ldquo;Data-Oriented Design and C++&amp;rdquo;&lt;/a&gt;
Ok, this is something paradigm shifting. Data-oriented versus object-oriented
design.&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/rX0ItVEVjHc&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;–Ω–∞-—Ä—É—Å—Å–∫–æ–º&#34;&gt;–ù–∞ —Ä—É—Å—Å–∫–æ–º&lt;/h2&gt;

&lt;h3 id=&#34;—Å—Ç–∞—Ç—å–∏&#34;&gt;–°—Ç–∞—Ç—å–∏&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://antonz.ru/interest/&#34;&gt;–°–¥–µ–ª–∞–π—Ç–µ —Å–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ&lt;/a&gt;
&amp;ldquo;–≠—Ç–æ –∫–æ–Ω—Å–ø–µ–∫—Ç –ª–µ–∫—Ü–∏–∏ –õ—é–¥–≤–∏–≥–∞ –ë—ã—Å—Ç—Ä–æ–Ω–æ–≤—Å–∫–æ–≥–æ –æ–± –∏–Ω—Ç–µ—Ä–µ—Å–µ –∏ –∫–æ–Ω—Ç—Ä–∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ–º
—Ä–µ—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á. –õ—é–¥–≤–∏–≥ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å, –∫–∞–∫–∏–µ –ø—Ä–∏–µ–º—ã
–ø–æ–º–æ–≥–∞—é—Ç –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –µ–≥–æ, —á–µ–º –≤—Ä–µ–¥–µ–Ω ¬´–ø–æ—Ç–æ–∫¬ª –∏ –∫–∞–∫ —Ä–∞–∑—Ä—ã–≤ —à–∞–±–ª–æ–Ω–∞ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫
—É—Å–ø–µ—Ö—É.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>November Picks</title>
      <link>http://homeonrails.com/2016/12/november-picks/</link>
      <pubDate>Tue, 13 Dec 2016 12:06:13 +0000</pubDate>
      
      <guid>http://homeonrails.com/2016/12/november-picks/</guid>
      <description>&lt;p&gt;&amp;ldquo;Random picks from all over the Internet&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ru&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Truth bomb üí£üí•üëå &lt;a href=&#34;https://twitter.com/hashtag/JSConfAU16?src=hash&#34;&gt;#JSConfAU16&lt;/a&gt; &lt;a href=&#34;https://t.co/mq3B1Un9Fl&#34;&gt;pic.twitter.com/mq3B1Un9Fl&lt;/a&gt;&lt;/p&gt;&amp;mdash; Melissa Kaulfuss üéÑ (@MelissaKaulfuss) &lt;a href=&#34;https://twitter.com/MelissaKaulfuss/status/804209991510937600&#34;&gt;1 –¥–µ–∫–∞–±—Ä—è 2016 –≥.&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;english&#34;&gt;English&lt;/h2&gt;

&lt;h3 id=&#34;articles&#34;&gt;Articles&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://dave.cheney.net/2016/08/20/solid-go-design&#34;&gt;SOLID Go Design&lt;/a&gt;
Want to see how do these principles apply to a language written ~ 7 years
after the acronym &amp;ldquo;SOLID&amp;rdquo; was first introduced to the public?&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://bravenewgeek.com/you-are-not-paid-to-write-code/&#34;&gt;You Are Not Paid to Write Code&lt;/a&gt;
&amp;ldquo;you are not paid to write code. You have never been paid to write code. In
fact, code is a nasty byproduct of being a software engineer.&amp;rdquo;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;videos&#34;&gt;Videos&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=03GsLxVdVzU&#34;&gt;Designing for Performance&lt;/a&gt;
You will hear about latency, throughput, queuing theory, dangers of
abstractions and much more.&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/03GsLxVdVzU&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=kDh5BrqiGhI&#34;&gt;The Verification of a Distributed System&lt;/a&gt;
We are all writing distributed systems. And while most of us probably do not
need formal specifications, other methods (unit, integration, property-based
testing, fault injection) and tactics are very useful.
&lt;a href=&#34;https://github.com/CaitieM20/TheVerificationOfDistributedSystem&#34;&gt;https://github.com/CaitieM20/TheVerificationOfDistributedSystem&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/kDh5BrqiGhI&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;–Ω–∞-—Ä—É—Å—Å–∫–æ–º&#34;&gt;–ù–∞ —Ä—É—Å—Å–∫–æ–º&lt;/h2&gt;

&lt;h3 id=&#34;—Å—Ç–∞—Ç—å–∏&#34;&gt;–°—Ç–∞—Ç—å–∏&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@shiroginne/%D1%81%D0%BE%D0%B2%D0%B5%D1%82%D1%8B-%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%81%D1%82%D0%B0%D0%BC-%D0%BA%D0%BE%D1%82%D0%BE%D1%80%D1%8B%D0%B5-%D0%B8%D1%89%D1%83%D1%82-%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%83-c4df8f7caf1f#.ung9wu4n0&#34;&gt;–°–æ–≤–µ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –∏—â—É—Ç —Ä–∞–±–æ—Ç—É&lt;/a&gt;
–û–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –ª—É—á—à–∏—Ö –ø–æ—Å—Ç–æ–≤ –ø–æ –¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>October Picks</title>
      <link>http://homeonrails.com/2016/11/october-picks/</link>
      <pubDate>Fri, 11 Nov 2016 12:20:03 +0000</pubDate>
      
      <guid>http://homeonrails.com/2016/11/october-picks/</guid>
      <description>&lt;p&gt;&amp;ldquo;Random picks from all over the Internet&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ru&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;We all know what&amp;#39;s coming. &lt;a href=&#34;https://t.co/4P2GcWt09D&#34;&gt;pic.twitter.com/4P2GcWt09D&lt;/a&gt;&lt;/p&gt;&amp;mdash; Adam (@AdamWhitcroft) &lt;a href=&#34;https://twitter.com/AdamWhitcroft/status/791718192506953728&#34;&gt;27 –æ–∫—Ç—è–±—Ä—è 2016 –≥.&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;english&#34;&gt;English&lt;/h2&gt;

&lt;h3 id=&#34;articles&#34;&gt;Articles&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://danluu.com/hn-comments/&#34;&gt;Hacker News comments&lt;/a&gt;
&amp;ldquo;I compiled a very abbreviated list of comments I like because comments seem to get lost.&amp;rdquo;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://medium.com/the-hoard/how-kafkas-storage-internals-work-3a29b02e026#.t3um9zqs0&#34;&gt;How Kafka‚Äôs Storage Internals Work&lt;/a&gt;
Want to know how Kafka stores data? Then read this small article.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://medium.com/@FunctionalWorks/relocating-to-london-12754053c81e#.xgbknzar5&#34;&gt;Relocating to London&lt;/a&gt;
The bottom line is that ¬£30,000 annual salary in London equals to ¬£8,500 in savings (50000 RUB per month). If you want to save more, there are options: &lt;a href=&#34;https://hackerlife.co/blog/compare-cities-cost/London-United-Kingdom&#34;&gt;work in USA&lt;/a&gt;, remote work for a USA company, another options?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;slides&#34;&gt;Slides&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/caitiem20/a-brief-history-of-distributed-programming-rpc&#34;&gt;A Brief History of Distributed Programming: RPC&lt;/a&gt;
Although, we have some solutions (Finagle, gRPC), we are still in the beginning.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;–Ω–∞-—Ä—É—Å—Å–∫–æ–º&#34;&gt;–ù–∞ —Ä—É—Å—Å–∫–æ–º&lt;/h2&gt;

&lt;h3 id=&#34;—Å—Ç–∞—Ç—å–∏&#34;&gt;–°—Ç–∞—Ç—å–∏&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://bvz.name/blog/all/lyudvig-kazan-2016/&#34;&gt;–õ—é–¥–≤–∏–≥, –ö–∞–∑–∞–Ω—å, 2016&lt;/a&gt;
&amp;ldquo;–°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã ‚Äî —ç—Ç–æ —Ö–æ—Ä–æ—à–æ. –£—Å–ª–æ–≤–∏—è –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>September Picks</title>
      <link>http://homeonrails.com/2016/10/september-picks/</link>
      <pubDate>Tue, 11 Oct 2016 10:47:37 +0000</pubDate>
      
      <guid>http://homeonrails.com/2016/10/september-picks/</guid>
      <description>&lt;p&gt;&amp;ldquo;Random picks from all over the Internet&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ru&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&amp;quot;Most important, have the courage to follow your heart and intuition.&amp;quot; Remembering Steve and the many ways he changed our world. &lt;a href=&#34;https://t.co/ONAuEoq3uU&#34;&gt;pic.twitter.com/ONAuEoq3uU&lt;/a&gt;&lt;/p&gt;&amp;mdash; Tim Cook (@tim_cook) &lt;a href=&#34;https://twitter.com/tim_cook/status/783662822819401728&#34;&gt;5 –æ–∫—Ç—è–±—Ä—è 2016 –≥.&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;As many of you already know, I was traveling in China. And I didn&amp;rsquo;t have much
time to read articles. That&amp;rsquo;s why it&amp;rsquo;s only 4 articles and 1 video.&lt;/p&gt;

&lt;h2 id=&#34;english&#34;&gt;English&lt;/h2&gt;

&lt;h3 id=&#34;articles&#34;&gt;Articles&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.baqend.com/real-time-stream-processors-a-survey-and-decision-guidance-6d248f692056#.v6o6r3wm7&#34;&gt;Scalable Stream Processing: A Survey of Storm, Samza, Spark and Flink&lt;/a&gt;
Very good overview of the stream processing solutions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;videos&#34;&gt;Videos&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=HjASqh5z8ck&#34;&gt;PolyConf 16: Why System Programming is for Everyone / Julia Evans&lt;/a&gt;
strace, opensnoop, tcpdump, dstat, ngrep, &amp;hellip; I love that she is not afraid
to experiment, like &amp;ldquo;write a keyboard driver&amp;rdquo; or &amp;ldquo;write a tcp stack&amp;rdquo;. Maybe I
will follow in her steps and try to write these things too. There is a
transcript of the same talk (I believe)
&lt;a href=&#34;http://jvns.ca/blog/2016/09/17/strange-loop-talk/&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;–Ω–∞-—Ä—É—Å—Å–∫–æ–º&#34;&gt;–ù–∞ —Ä—É—Å—Å–∫–æ–º&lt;/h2&gt;

&lt;h3 id=&#34;—Å—Ç–∞—Ç—å–∏&#34;&gt;–°—Ç–∞—Ç—å–∏&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://tonsky.livejournal.com/308320.html&#34;&gt;–ì–æ–ª—ã–µ –∫–æ—Ä–æ–ª–∏ IT&lt;/a&gt;
–í –æ—á–µ—Ä–µ–¥–Ω–æ–π —Ä–∞–∑ –≥–æ–≤–æ—Ä—è—Ç, —á—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ —Å–ª–µ–ø–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ —Ö–∞–π–ø–æ–º, –¥–∞–∂–µ –µ—Å–ª–∏ –≤–æ
–≥–ª–∞–≤–µ —Å—Ç–æ—è—Ç –≤–∞—à–∏ –∫—É–º–∏—Ä—ã.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://grishaev.me/business-game&#34;&gt;–ë–∏–∑–Ω–µ—Å –∫–∞–∫ –∏–≥—Ä–∞&lt;/a&gt;
–ü—Ä–æ—á–µ–ª –∫–Ω–∏–≥—É. –ú–Ω–µ —Ç–∞–∫–∂–µ –æ—á–µ–Ω—å –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å. –°–ø–∞—Å–∏–±–æ –ò–≤–∞–Ω—É –∑–∞ –Ω–∞–≤–æ–¥–∫—É!&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://lifehacker.ru/2016/09/27/lichnaja-effektivnost/&#34;&gt;–û –ª–∏—á–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏&lt;/a&gt;
–î–æ–±—Ä–æ—Ç–Ω—ã–π –ø–æ—Å—Ç –ø—Ä–æ –ª–∏—á–Ω—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>July Picks</title>
      <link>http://homeonrails.com/2016/08/july-picks/</link>
      <pubDate>Sat, 13 Aug 2016 13:02:05 +0000</pubDate>
      
      <guid>http://homeonrails.com/2016/08/july-picks/</guid>
      <description>&lt;p&gt;&amp;ldquo;Random picks from all over the Internet&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ru&#34;&gt;&lt;p lang=&#34;und&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://t.co/jm7KvT7XXW&#34;&gt;pic.twitter.com/jm7KvT7XXW&lt;/a&gt;&lt;/p&gt;&amp;mdash; Max Jazz (@maxjazzz) &lt;a href=&#34;https://twitter.com/maxjazzz/status/758234340753018880&#34;&gt;27 –∏—é–ª—è 2016 –≥.&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;english&#34;&gt;English&lt;/h2&gt;

&lt;h3 id=&#34;articles&#34;&gt;Articles&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://joeduffyblog.com/2016/02/07/the-error-model/&#34;&gt;The Error Model&lt;/a&gt;
This is a long read, but it will pay off. Error codes,
unchecked exceptions, checked exceptions: The Good, The
Bad and Ugly.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://developers.soundcloud.com/blog/synchronous-communication-for-microservices-current-status-and-learnings&#34;&gt;Synchronous communication for microservices: current status and learnings&lt;/a&gt;
Learn why SoundCloud stopped writing client libraries.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://antirez.com/news/109&#34;&gt;Random notes on improving the Redis LRU algorithm&lt;/a&gt;
&amp;ldquo;The key with the least probability of being accessed in
the future should be removed from the data set. There is
only one problem: Redis and other caches are not able to
predict the future.&amp;rdquo;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;videos&#34;&gt;Videos&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ZgdS0EUmn70&#34;&gt;Intro to Architecture and Systems Design Interviews&lt;/a&gt;
If you&amp;rsquo;re preparing for an interview, this video might help you in the architecture part.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;–Ω–∞-—Ä—É—Å—Å–∫–æ–º&#34;&gt;–ù–∞ —Ä—É—Å—Å–∫–æ–º&lt;/h2&gt;

&lt;h3 id=&#34;—Å—Ç–∞—Ç—å–∏&#34;&gt;–°—Ç–∞—Ç—å–∏&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://habrahabr.ru/post/306590/&#34;&gt;–ë—ã—Å—Ç—Ä—ã–µ TCP —Å–æ–∫–µ—Ç—ã –Ω–∞ Erlang&lt;/a&gt;
&amp;ldquo;–í —ç—Ç–æ–π —Å—Ç–∞—Ç—å–µ —è –ø—Ä–µ–¥–ª–∞–≥–∞—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∑–≤–æ–ª—è—é—Ç —É–ª—É—á—à–∏—Ç—å —Ç—Ä–∏ —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∏–µ —Ä–∞–±–æ—Ç—ã —Å TCP: –ø—Ä–∏—ë–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π, –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∏—Ö.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>June Picks</title>
      <link>http://homeonrails.com/2016/07/june-picks/</link>
      <pubDate>Mon, 11 Jul 2016 12:44:33 +0000</pubDate>
      
      <guid>http://homeonrails.com/2016/07/june-picks/</guid>
      <description>&lt;p&gt;&amp;ldquo;Random picks from all over the Internet&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ru&#34;&gt;&lt;p lang=&#34;ru&#34; dir=&#34;ltr&#34;&gt;–ö–æ–≥–¥–∞ —Ç–≤–æ–π –∫–æ—Ç –æ—Å–≤–æ–∏–ª –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –º—É—Ç–∏—Ç –ø—Ä–∏–ª–æ–∂—É—Ö—É &lt;a href=&#34;https://t.co/dzyPvhc5eL&#34;&gt;pic.twitter.com/dzyPvhc5eL&lt;/a&gt;&lt;/p&gt;&amp;mdash; BuzzFeed Russia (@BuzzFeedRU) &lt;a href=&#34;https://twitter.com/BuzzFeedRU/status/749909386890321920&#34;&gt;4 –∏—é–ª—è 2016 –≥.&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;english&#34;&gt;English&lt;/h2&gt;

&lt;h3 id=&#34;articles&#34;&gt;Articles&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://highscalability.com/blog/2016/1/25/design-of-a-modern-cache.html&#34;&gt;Design Of A Modern Cache&lt;/a&gt;
&amp;ldquo;In this article we will explore the modern methods used by Caffeine, an open-source Java caching library, that yield high hit rates and excellent concurrency. These ideas can be translated to your favorite language and hopefully some readers will be inspired to do just that.&amp;rdquo;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://bravenewgeek.com/you-cannot-have-exactly-once-delivery/&#34;&gt;You Cannot Have Exactly-Once Delivery&lt;/a&gt;
Probably the best place to start exploring the topic: &amp;ldquo;delivery guarantees in distributed systems&amp;rdquo;. You&amp;rsquo;re encouraged to follow the links in the article.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html&#34;&gt;How to do distributed locking&lt;/a&gt;
Critics of the Redlock algorithm by Martin Kleppmann.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;presentations&#34;&gt;Presentations&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/barnbarn/infrastructure-security-how-hard-could-it-be-right&#34;&gt;Infrastructure Security: How Hard Could it Be, Right? by Ben Hughes&lt;/a&gt;
I know nothing about infrastructure security and this is a big topic. Anyway, it is interesting to take a look from time to time.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;–Ω–∞-—Ä—É—Å—Å–∫–æ–º&#34;&gt;–ù–∞ —Ä—É—Å—Å–∫–æ–º&lt;/h2&gt;

&lt;h3 id=&#34;—Å—Ç–∞—Ç—å–∏&#34;&gt;–°—Ç–∞—Ç—å–∏&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://habrahabr.ru/post/303802/&#34;&gt;Big Data –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–æ–∑–≥–∞&lt;/a&gt;
–û—Ç–ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç—å—è, –æ–ø–∏—Å—ã–≤–∞—é—â–∞—è —á–µ–º Hadoop —è–≤–ª—è–µ—Ç—Å—è, –∞ —á–µ–º –Ω–µ—Ç.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>May Picks</title>
      <link>http://homeonrails.com/2016/06/may-picks/</link>
      <pubDate>Sat, 11 Jun 2016 10:40:07 +0000</pubDate>
      
      <guid>http://homeonrails.com/2016/06/may-picks/</guid>
      <description>&lt;p&gt;&amp;ldquo;Random picks from all over the Internet&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ru&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;when your shower uses github more than you &lt;a href=&#34;https://t.co/K21qAZbRRC&#34;&gt;pic.twitter.com/K21qAZbRRC&lt;/a&gt;&lt;/p&gt;&amp;mdash; Visual Idiot (@idiot) &lt;a href=&#34;https://twitter.com/idiot/status/740505961555742721&#34;&gt;8 –∏—é–Ω—è 2016 –≥.&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;english&#34;&gt;English&lt;/h2&gt;

&lt;h3 id=&#34;articles&#34;&gt;Articles&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://tech.zalando.de/blog/apache-showdown-flink-vs.-spark/&#34;&gt;Apache Showdown: Flink vs. Spark&lt;/a&gt;
If you&amp;rsquo;re looking into stream processing solutions, you may want to check this out. It gives a nice overview of differences between Apache Spark and Flink.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://alexott.blogspot.ru/2016/06/notes-on-practical-machine-learning.html&#34;&gt;Notes on practical machine learning&lt;/a&gt;
&lt;a href=&#34;https://alexott-ru.blogspot.ru/2016/06/blog-post.html&#34;&gt;ru-RU&lt;/a&gt;
How to get good results when using machine learning and the steps required. Lots of very good points.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://flyingfrogblog.blogspot.ru/2016/05/disadvantages-of-purely-functional.html&#34;&gt;Disadvantages of purely functional programming&lt;/a&gt;
Notice the word &amp;ldquo;purely&amp;rdquo;. I tend to agree with the author on 1, 2, 4, 8 and 9.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://cloud.google.com/blog/big-data/2016/05/no-shard-left-behind-dynamic-work-rebalancing-in-google-cloud-dataflow&#34;&gt;No shard left behind: dynamic work rebalancing in Google Cloud Dataflow&lt;/a&gt;
If you&amp;rsquo;re working with one of the MapReduce frameworks, it might be interesting for you to see how Google Dataflow implemented dynamic work rebalancing as a way of dealing with stragglers. It reminds me &lt;a href=&#34;https://jlouisramblings.blogspot.ru/2013/01/how-erlang-does-scheduling.html&#34;&gt;work-stealing in Erlang&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;–Ω–∞-—Ä—É—Å—Å–∫–æ–º&#34;&gt;–ù–∞ —Ä—É—Å—Å–∫–æ–º&lt;/h2&gt;

&lt;h3 id=&#34;—Å—Ç–∞—Ç—å–∏&#34;&gt;–°—Ç–∞—Ç—å–∏&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://medium.com/@allo/%D0%BE-%D0%BF%D1%80%D0%B8%D0%BE%D1%80%D0%B8%D1%82%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D0%B8-7f0556b49fcb#.e0yc5a48y&#34;&gt;–û –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏&lt;/a&gt;
1) –ü–æ—á–µ–º—É –≤–∞–∂–Ω–æ –æ—Ç–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–¥–∞—á
2) –ü–æ—á–µ–º—É –≤–∞–∂–Ω–æ –¥–µ–ª–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞ 100%&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://grishaev.me/python&#34;&gt;–†–∞–∑–º—ã—à–ª–µ–Ω–∏—è –æ –ü–∏—Ç–æ–Ω–µ&lt;/a&gt;
Clojure –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —É–º—ã –ø–∏—Ç–æ–Ω–∏—Å—Ç–æ–≤! –ü–ª—é—Å—ã / –º–∏–Ω—É—Å—ã —è–∑—ã–∫–∞.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>April Picks</title>
      <link>http://homeonrails.com/2016/05/april-picks/</link>
      <pubDate>Tue, 10 May 2016 20:43:40 +0000</pubDate>
      
      <guid>http://homeonrails.com/2016/05/april-picks/</guid>
      <description>&lt;p&gt;&amp;ldquo;Random picks from all over the Internet&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ru&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Docker. &lt;a href=&#34;https://t.co/43yvyT8A14&#34;&gt;pic.twitter.com/43yvyT8A14&lt;/a&gt;&lt;/p&gt;&amp;mdash; Robert (@kventil) &lt;a href=&#34;https://twitter.com/kventil/status/725645207799209984&#34;&gt;28 –∞–ø—Ä–µ–ª—è 2016 –≥.&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;english&#34;&gt;English&lt;/h2&gt;

&lt;h3 id=&#34;articles&#34;&gt;Articles&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://coffeenco.de/articles/lockless_concurrency.html&#34;&gt;Gentle Introduction to Lockless Concurrency&lt;/a&gt;
If you, like me, struggle with the term &amp;ldquo;lock-free&amp;rdquo; and want to know and explore the subject - this might come in handy.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://medium.freecodecamp.com/being-a-developer-after-40-3c5dd112210c#.8myi69h2i&#34;&gt;Being A Developer After 40&lt;/a&gt;
&lt;a href=&#34;https://habrahabr.ru/post/282674/&#34;&gt;ru-RU&lt;/a&gt;
&amp;ldquo;Hi everyone, I am a forty-two years old self-taught developer, and this is my story.&amp;rdquo; And people love stories.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.evanmiller.org/elixir-ram-and-the-template-of-doom.html&#34;&gt;Elixir RAM and the Template of Doom&lt;/a&gt;
Hint: Erlang also does these optimizations since both Erlang and Elixir use the same virtual machine.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://tonsky.me/blog/interactive-development/&#34;&gt;The Blessing of Interactive Development&lt;/a&gt;
&amp;ldquo;I like to reflect on how my own writing process has evolved over the years.&amp;rdquo; If you want to know how Clojure developers write their code, take a look at this article (and watch video at the end).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;videos&#34;&gt;Videos&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=rFejpH_tAHM&#34;&gt;Simplicity is Complicated by Rob Pike&lt;/a&gt;
I&amp;rsquo;ve probably watched this talk 3 times :) It&amp;rsquo;s worth of your time, trust me.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;tools&#34;&gt;Tools&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/google/xi-editor&#34;&gt;Xi Editor&lt;/a&gt;
A modern editor with a backend written in Rust. Powered by Google. Very early stage, though.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://kite.com/&#34;&gt;Your programming copilot&lt;/a&gt;
&amp;ldquo;Kite augments your coding environment with all the internet‚Äôs programming knowledge.&amp;rdquo; Can&amp;rsquo;t wait to try it! So, if you have one extra invitation, please contact me.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;–Ω–∞-—Ä—É—Å—Å–∫–æ–º&#34;&gt;–ù–∞ —Ä—É—Å—Å–∫–æ–º&lt;/h2&gt;

&lt;h3 id=&#34;—Å—Ç–∞—Ç—å–∏&#34;&gt;–°—Ç–∞—Ç—å–∏&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.furfur.me/furfur/heros/heroes-furfur/217349-kak-ya-rabotala-na-ferme-kannabisa&#34;&gt;–õ–ò–ß–ù–´–ô –û–ü–´–¢: –ö–ê–ö –Ø –†–ê–ë–û–¢–ê–õ–ê –ù–ê –§–ï–†–ú–ï –ú–ê–†–ò–•–£–ê–ù–´&lt;/a&gt;
–ß–∏—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –∫–Ω–∏–≥–∞, —Ç–æ–ª—å–∫–æ –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∞—è.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>March Picks</title>
      <link>http://homeonrails.com/2016/04/march-picks/</link>
      <pubDate>Mon, 11 Apr 2016 22:00:55 +0000</pubDate>
      
      <guid>http://homeonrails.com/2016/04/march-picks/</guid>
      <description>&lt;p&gt;&amp;ldquo;Random picks from all over the Internet&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ru&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Remember to leave positive feedback and say thanks too. &lt;a href=&#34;https://t.co/5byOuQpi92&#34;&gt;pic.twitter.com/5byOuQpi92&lt;/a&gt;&lt;/p&gt;&amp;mdash; Anna Pawlicka (@AnnaPawlicka) &lt;a href=&#34;https://twitter.com/AnnaPawlicka/status/709978859005988864&#34;&gt;16 –º–∞—Ä—Ç–∞ 2016 –≥.&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;english&#34;&gt;English&lt;/h2&gt;

&lt;h3 id=&#34;articles&#34;&gt;Articles&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://llogiq.github.io/2016/02/28/java-rust.html&#34;&gt;Comparing Rust and Java&lt;/a&gt;
Very thoughtful comparison. Great read!&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://alarmingdevelopment.org/?p=893&#34;&gt;The Future Programming Manifesto&lt;/a&gt;
&amp;ldquo;Rewarding programmers for their ability to handle complexity selects for
those who love it.&amp;rdquo; Makes me think.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://m.signalvnoise.com/manufacturing-quality-time-fe043fa7b7a1#.e5tu7l90a&#34;&gt;Manufacturing quality time&lt;/a&gt;
&lt;a href=&#34;http://lifehacker.ru/2016/03/14/manufacturing-quality-time/&#34;&gt;ru-RU&lt;/a&gt;
You can hate @dhh or worship him, but he most certainly has a couple of very
good points about time management.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://medium.com/life-learning/facebook-turned-me-down-the-job-rejection-letter-that-turned-into-a-4-billion-check-962c658d876c#.tegs8nnbh&#34;&gt;‚ÄòFacebook turned me down‚Äô‚Ää‚Äî‚Ääthe job rejection letter that turned into a $4 billion check&lt;/a&gt;
‚ÄúIf you haven&amp;rsquo;t found it yet, keep looking. Don&amp;rsquo;t settle. As with all matters
of the heart, you&amp;rsquo;ll know when you find it. And, like any great relationship,
it just gets better and better as the years roll on.‚Äù ‚Äï Steve Jobs&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;videos&#34;&gt;Videos&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.infoq.com/presentations/java-vs-c-performance&#34;&gt;Java vs. C/C++ Performance by Cliff Click&lt;/a&gt;
The speaker clearly outlines the strengths of both languages and dispels some
prejudices programmers have about them.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;–Ω–∞-—Ä—É—Å—Å–∫–æ–º&#34;&gt;–ù–∞ —Ä—É—Å—Å–∫–æ–º&lt;/h2&gt;

&lt;h3 id=&#34;—Å—Ç–∞—Ç—å–∏&#34;&gt;–°—Ç–∞—Ç—å–∏&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://eax.me/avoid-nosql/&#34;&gt;–ü–æ—á–µ–º—É —ç—Ç–∏ –≤–∞—à–∏ –º–æ–¥–Ω—ã–µ NoSQL —Ä–µ—à–µ–Ω–∏—è –Ω–µ —Ç–∞–∫ —É–∂ —Ö–æ—Ä–æ—à–∏&lt;/a&gt;
–°–ø–æ—Ä–Ω–æ –∫–æ–Ω–µ—á–Ω–æ, –ø–æ—Ç–æ–º—É –∫–∞–∫ –≤—Å–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∑–∞–¥–∞—á–∏. –ù–æ –≤ —Ü–µ–ª–æ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é :)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;–≤–∏–¥–µ–æ&#34;&gt;–í–∏–¥–µ–æ&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Mx22NaWmFhk&#34;&gt;RSCONF: Andrey Listochkin - –ö–∞—á–µ—Å—Ç–≤–æ. –ö–∞–∫ –¥–µ–ª–∞—Ç—å —Å–≤–æ—é —Ä–∞–±–æ—Ç—É —Ö–æ—Ä–æ—à–æ.&lt;/a&gt;
&amp;ldquo;–ü–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å –≤–ª–∞–¥–µ—Ç—å —Ç–µ–º, —á—Ç–æ –≤—ã –¥–µ–ª–∞–µ—Ç–µ&amp;rdquo;. –ú–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ª—å–∫–æ —Ä–∞–¥–∏
—à—É—Ç–æ–∫. –í–æ–æ–±—â–µ–º –≤–∫–ª—é—á–∞–π—Ç–µ, –Ω–µ –ø–æ–∂–∞–ª–µ–µ—Ç–µ.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=xPFRUM_oDKA&#34;&gt;KharkivJS #5 2015 ‚Äî Andrey Listochkin ‚Äî Anti hype –∫–∞–∫ –Ω–µ –≥–Ω–∞—Ç—å—Å—è –∑–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏ –∏ –Ω–∞—á–∞—Ç—å –∂–∏—Ç—å&lt;/a&gt;
60% - paid, 30% - research/education, 10% - pet projects. –£ –∫–∞–∂–¥–æ–≥–æ –º–æ–≥—É—Ç
–±—ã—Ç—å —Å–≤–æ–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏, —É –¥–æ–∫–ª–∞–¥—á–∏–∫–∞ —Ç–∞–∫–∏–µ.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>February Picks</title>
      <link>http://homeonrails.com/2016/03/february-picks/</link>
      <pubDate>Sat, 12 Mar 2016 22:12:38 +0000</pubDate>
      
      <guid>http://homeonrails.com/2016/03/february-picks/</guid>
      <description>&lt;p&gt;&amp;ldquo;Random picks from all over the Internet&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ru&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Four stages of JS developer:&lt;br&gt;1. I can‚Äôt make JS do what I want&lt;br&gt;2. I can make JS do what I want&lt;br&gt;3. I know what JS wants&lt;br&gt;4. I am JS&lt;/p&gt;&amp;mdash; Dmitry Baranovskiy (@DmitryBaranovsk) &lt;a href=&#34;https://twitter.com/DmitryBaranovsk/status/700242822876663808&#34;&gt;18 —Ñ–µ–≤—Ä–∞–ª—è 2016 –≥.&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;english&#34;&gt;English&lt;/h2&gt;

&lt;h3 id=&#34;articles&#34;&gt;Articles&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://medium.com/@jlouis666/how-to-build-stable-systems-6fe9dcf32fc4#.fmcmt0s3i&#34;&gt;How to build stable systems ‚Äî An incomplete opinionated guide.&lt;/a&gt;
Great article! Topics are process &amp;amp; people, system planning, setup,
development, picking a database, picking a programming language,
configuration and operations.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://queue.acm.org/detail.cfm?id=2889274&#34;&gt;The Verification of a Distributed System&lt;/a&gt;
Distributed systems are hard. Only lazy people do not talk about it. Far fewer
people write about how to reduce and control the complexity of the system
being developed. Topics are formal specification languages, model checking,
monitoring, canaries, unit and integration tests and fault injection.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/alex/what-happens-when&#34;&gt;What happens when&amp;hellip;&lt;/a&gt; An attempt
to answer the age old interview question &amp;ldquo;What happens when you type
google.com into your browser and press enter?&amp;rdquo; (&lt;a href=&#34;https://habrahabr.ru/post/251373/&#34;&gt;–ß–∞—Å—Ç—å –Ω–∞
—Ä—É—Å—Å–∫–æ–º&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;–Ω–∞-—Ä—É—Å—Å–∫–æ–º&#34;&gt;–ù–∞ —Ä—É—Å—Å–∫–æ–º&lt;/h2&gt;

&lt;h3 id=&#34;—Å—Ç–∞—Ç—å–∏&#34;&gt;–°—Ç–∞—Ç—å–∏&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://dou.ua/lenta/articles/why-need-junior/&#34;&gt;–°—Ç–æ–∏—Ç –ª–∏ –±—Ä–∞—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç—É –¥–∂—É–Ω–∏–æ—Ä–æ–≤&lt;/a&gt;
–•–æ—Ä–æ—à–∏–º –¥–∂—É–Ω–æ–º –∫–∞—à—É –Ω–µ –∏—Å–ø–æ—Ä—Ç–∏—à—å. –ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, –∫–∞–∫ –∞–≤—Ç–æ—Ä —Ä–∞—Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç –≤—Å–µ –ø–æ
–ø–æ–ª–æ—á–∫–∞–º, –ø–æ–¥—Ä–æ–±–Ω–æ –æ–±—Å—É–∂–¥–∞—è –∫–∞–∂–¥—ã–π –∞—Å–ø–µ–∫—Ç —Ä–∞–±–æ—Ç—ã –¥–∂—É–Ω–∏–æ—Ä–∞.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>January picks</title>
      <link>http://homeonrails.com/2016/02/january-picks/</link>
      <pubDate>Wed, 10 Feb 2016 22:09:20 +0000</pubDate>
      
      <guid>http://homeonrails.com/2016/02/january-picks/</guid>
      <description>&lt;p&gt;&amp;ldquo;Random picks from all over the Internet&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ru&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Put Haskell on your resume even if you don&amp;#39;t know it. When asked, say your resume is lazy and you&amp;#39;ll learn it when results are needed.&lt;/p&gt;&amp;mdash; Kyrylo Perevozchykov (@axique) &lt;a href=&#34;https://twitter.com/axique/status/679713633715286021&#34;&gt;23 –¥–µ–∫–∞–±—Ä—è 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;english&#34;&gt;English&lt;/h2&gt;

&lt;h3 id=&#34;articles&#34;&gt;Articles&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://medium.com/this-is-not-a-monad-tutorial/interview-with-jesper-louis-andersen-about-erlang-haskell-ocaml-go-idris-the-jvm-software-and-5628fe591295&#34;&gt;Interview with Jesper Louis Andersen about Erlang, Haskell, OCaml, Go, Idris, the JVM, software and protocol design‚Ää‚Äî‚ÄäPART II&lt;/a&gt;
What are the advantages of the Erlang VM over the JVM? Why Erlang/OTP do not
have a default gen_pool implementation? How Clojure‚Äôs ‚Äúprocotols‚Äù could help
Erlang? Answers to these and many more questions you will find in the article
above.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://joearms.github.io/2016/01/28/A-Badass-Way-To-Connect-Programs-Together.html&#34;&gt;A Badass Way to Connect Programs Together&lt;/a&gt;
Another interesting binary protocol - OSC. I am curious how it compares to
thrift and others.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;–Ω–∞-—Ä—É—Å—Å–∫–æ–º&#34;&gt;–ù–∞ —Ä—É—Å—Å–∫–æ–º&lt;/h2&gt;

&lt;h3 id=&#34;—Å—Ç–∞—Ç—å–∏&#34;&gt;–°—Ç–∞—Ç—å–∏&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://thesz.livejournal.com/1468493.html&#34;&gt;–î–ª—è –•–∞—Å–∫–µ–ª—è –Ω–µ—Ç –ø—Ä–æ—Å—Ç—ã—Ö –≤–µ–±-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤&lt;/a&gt;
–ü–µ—á–∞–ª—å–Ω–æ, —á—Ç–æ —Å–∫–∞–∑–∞—Ç—å.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.forbes.ru/svoi-biznes/startapy/310613-dva-fokusa-kak-startapu-proiti-dolinu-smerti&#34;&gt;–î–≤–∞ —Ñ–æ–∫—É—Å–∞: –∫–∞–∫ —Å—Ç–∞—Ä—Ç–∞–ø—É –ø—Ä–æ–π—Ç–∏ ¬´–¥–æ–ª–∏–Ω—É —Å–º–µ—Ä—Ç–∏¬ª&lt;/a&gt;
–ó–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∞—è –∏ –ø–æ—É—á–∏—Ç–µ–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –æ —Å—Ç–∞—Ä—Ç–∞–ø–µ &lt;a href=&#34;http://elementaree.ru/&#34;&gt;http://elementaree.ru/&lt;/a&gt;
(–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –µ–¥—ã).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;–≤–∏–¥–µ–æ&#34;&gt;–í–∏–¥–µ–æ&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=2HbUhMxtDYI&#34;&gt;Ruby –≤ –≤–∏–¥–µ–æ-—Ä–µ–∫–ª–∞–º–µ. –ù–∏–∫–æ–ª–∞–π –†–µ–∫—É–±—Ä–∞—Ç—Å–∫–∏–π, Virool.&lt;/a&gt;
&amp;ldquo;Virool ‚Äî –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –≤–∏–¥–µ–æ-—Ä–µ–∫–ª–∞–º—ã –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ. –ú—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ—Ç–Ω–∏
–º–∏–ª–ª–∏–æ–Ω–æ–≤ —Å–æ–±—ã—Ç–∏–π –∫–∞–∂–¥—ã–π —á–∞—Å. –Ø —Ä–∞—Å—Å–∫–∞–∂—É, –∫–∞–∫ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º Ruby, —á—Ç–æ–±—ã
—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç –ø–æ—Ç–æ–∫, –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ–≥–æ –∑–∞ —Å—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–µ–∫—É–Ω–¥—ã –∏ —É–≤–∏–¥–µ—Ç—å –∫–∞—Ä—Ç–∏–Ω—É
–ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–µ–≥–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏. –í—ã —É–∑–Ω–∞–µ—Ç–µ, –∫–∞–∫ JRuby, Celluloid, Logstah,
Apache Kafka –∏ –¥—Ä—É–≥–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ–º–æ–≥–∞—é—Ç –Ω–∞–º –≤ —ç—Ç–æ–º.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>December picks</title>
      <link>http://homeonrails.com/2016/01/december-picks/</link>
      <pubDate>Fri, 15 Jan 2016 21:15:49 +0000</pubDate>
      
      <guid>http://homeonrails.com/2016/01/december-picks/</guid>
      <description>&lt;p&gt;&amp;ldquo;Random picks from all over the Internet&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ru&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;First attempt at async programming. &lt;a href=&#34;https://t.co/u5YwRqBuou&#34;&gt;pic.twitter.com/u5YwRqBuou&lt;/a&gt;&lt;/p&gt;&amp;mdash; Sampson (@jonathansampson) &lt;a href=&#34;https://twitter.com/jonathansampson/status/676487374495342592&#34;&gt;14 –¥–µ–∫–∞–±—Ä—è 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;english&#34;&gt;English&lt;/h2&gt;

&lt;h3 id=&#34;articles&#34;&gt;Articles&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://danluu.com/file-consistency/&#34;&gt;Files Are Hard&lt;/a&gt;
Fantastic read! Reminded me Aphyr&amp;rsquo;s series, where he shows that DBs do not
work as intended sometimes.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://engineering.snapdeal.com/how-were-building-a-system-to-scale-for-billions-of-requests-per-day-201512/&#34;&gt;How we‚Äôre building a system to scale for billions of requests per day&lt;/a&gt;
It&amp;rsquo;s good to see what people are choosing for their projects from time to
time. Lots of advices, although some of them are only applicable if your app
is supposed to handle tons of RPS.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.vividcortex.com/blog/why-percentiles-dont-work-the-way-you-think&#34;&gt;Why Percentiles Don‚Äôt Work the Way you Think&lt;/a&gt;
&amp;ldquo;There‚Äôs a big problem with most time series data and percentiles. The issue
is that time series databases are almost always storing aggregate metrics
over time ranges, not the full population of events that were originally
measured.&amp;rdquo;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>November picks</title>
      <link>http://homeonrails.com/2015/12/november-picks/</link>
      <pubDate>Wed, 09 Dec 2015 19:43:27 +0000</pubDate>
      
      <guid>http://homeonrails.com/2015/12/november-picks/</guid>
      <description>&lt;p&gt;&amp;ldquo;Random picks from all over the Internet&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ru&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Programming &lt;a href=&#34;https://t.co/YR9e8cDrJs&#34;&gt;pic.twitter.com/YR9e8cDrJs&lt;/a&gt;&lt;/p&gt;&amp;mdash; Luis Solano (@luisobo) &lt;a href=&#34;https://twitter.com/luisobo/status/662750626875592704&#34;&gt;6 –Ω–æ—è–±—Ä—è 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;english&#34;&gt;English&lt;/h2&gt;

&lt;h3 id=&#34;articles&#34;&gt;Articles&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@treystout/engineering-principles-c58f5f8c264b&#34;&gt;Engineering Principles&lt;/a&gt;
A very good list of the core principles every engineer should have. If your
team doesn&amp;rsquo;t have any, just take these.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;videos&#34;&gt;Videos&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/presentations/abstract-algebra-analytics&#34;&gt;Add ALL the Things: Abstract Algebra Meets Analytics by Avi Bryant&lt;/a&gt;
Probably the best explanation of how Min-hash and HyperLogLog algorithms work (more or less).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=qDNPQo9UmJA&#34;&gt;From REST to CQRS with Clojure, Kafka, &amp;amp; Datomic by Bobby Calderwood&lt;/a&gt;
This is completely different comparing to what I am used to. And that&amp;rsquo;s why
this video is here. Many of the disadvantages of REST seem reasonable and
solution, which he propose, looks very interesting.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;–Ω–∞-—Ä—É—Å—Å–∫–æ–º&#34;&gt;–ù–∞ —Ä—É—Å—Å–∫–æ–º&lt;/h2&gt;

&lt;h3 id=&#34;—Å—Ç–∞—Ç—å–∏&#34;&gt;–°—Ç–∞—Ç—å–∏&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@pismenny/%D1%87%D0%B8%D1%82%D0%B0%D0%B5%D0%BC%D1%8B%D0%B9-%D0%BA%D0%BE%D0%B4-%D0%BF%D1%80%D0%B8%D0%BD%D1%86%D0%B8%D0%BF-%D1%81%D0%B0%D0%BB%D1%84%D0%B5%D1%82%D0%BA%D0%B8-74f0dd50a98a#.95nv9lbd6&#34;&gt;–•–æ—Ä–æ—à–æ —á–∏—Ç–∞–µ–º—ã–π –∫–æ–¥ —É–º–µ—â–∞–µ—Ç—Å—è –Ω–∞ —Å–∞–ª—Ñ–µ—Ç–∫–µ&lt;/a&gt;
–ù–µ–ø–ª–æ—Ö–æ–π —Å–ø–æ—Å–æ–± –ø–æ–Ω—è—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç –∏ –ø–æ–Ω—è—Ç–µ–Ω –∫–æ–¥ —É –≤–∞—Å –ø–µ—Ä–µ–¥ –≥–ª–∞–∑–∞–º–∏.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>October picks</title>
      <link>http://homeonrails.com/2015/11/october-picks/</link>
      <pubDate>Mon, 02 Nov 2015 23:34:32 +0000</pubDate>
      
      <guid>http://homeonrails.com/2015/11/october-picks/</guid>
      <description>&lt;p&gt;&amp;ldquo;Random picks from all over the Internet&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ru&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Happy Halloween! &lt;a href=&#34;https://t.co/KptTZkFJX8&#34;&gt;pic.twitter.com/KptTZkFJX8&lt;/a&gt;&lt;/p&gt;&amp;mdash; Practical Developer (@ThePracticalDev) &lt;a href=&#34;https://twitter.com/ThePracticalDev/status/660584764282417152&#34;&gt;31 –æ–∫—Ç—è–±—Ä—è 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;english&#34;&gt;English&lt;/h2&gt;

&lt;h3 id=&#34;articles&#34;&gt;Articles&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://coding-geek.com/how-does-a-hashmap-work-in-java/&#34;&gt;How does a HashMap work in JAVA&lt;/a&gt;
Deep dive into the most popular data structure out there.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://videlalvaro.github.io/2015/02/programming-myths.html&#34;&gt;HARMFUL GOTOS, PREMATURE OPTIMIZATIONS, AND PROGRAMMING MYTHS ARE THE ROOT OF ALL EVIL&lt;/a&gt;
Fascinating read about common programming myths. Found a good quote of Alan
Kay there - &amp;ldquo;The biggest problem we have as human beings is that we confuse
our beliefs with reality&amp;rdquo;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://highscalability.com/blog/2015/10/5/your-load-generator-is-probably-lying-to-you-take-the-red-pi.html&#34;&gt;Your Load Generator Is Probably Lying To You - Take The Red Pill And Find Out Why&lt;/a&gt;
The best explanation of the coordinated omission problem I&amp;rsquo;ve seen so far.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;–Ω–∞-—Ä—É—Å—Å–∫–æ–º&#34;&gt;–ù–∞ —Ä—É—Å—Å–∫–æ–º&lt;/h2&gt;

&lt;h3 id=&#34;–≤–∏–¥–µ–æ&#34;&gt;–í–∏–¥–µ–æ&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=k_IaWe1FJ4I&#34;&gt;–ú–∞—Å—Ç–µ—Ä –∫–ª–∞—Å—Å –ê –†—ã–±–∞–∫–∞ (Badoo) &amp;ldquo;–ü—Ä–æ —Ç–æ, —á—Ç–æ —è –±—ã —Ö–æ—Ç–µ–ª, —á—Ç–æ–±—ã –º–Ω–µ —Ä–∞—Å—Å–∫–∞–∑–∞–ª–∏, –ø–æ–∫–∞ —è —É—á–∏–ª—Å—è&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>September picks</title>
      <link>http://homeonrails.com/2015/10/september-picks/</link>
      <pubDate>Wed, 07 Oct 2015 11:14:55 +0000</pubDate>
      
      <guid>http://homeonrails.com/2015/10/september-picks/</guid>
      <description>&lt;p&gt;&amp;ldquo;Random picks from all over the Internet&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ru&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Vandals choose &lt;a href=&#34;https://twitter.com/hashtag/Java?src=hash&#34;&gt;#Java&lt;/a&gt; to maximize damage thanks to its verbosity. &lt;a href=&#34;http://t.co/OwHTFZMNGq&#34;&gt;pic.twitter.com/OwHTFZMNGq&lt;/a&gt;&lt;/p&gt;&amp;mdash; Hildeberto Mendon√ßa (@htmfilho) &lt;a href=&#34;https://twitter.com/htmfilho/status/645610733196189696&#34;&gt;20 —Å–µ–Ω—Ç—è–±—Ä—è 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;english&#34;&gt;English&lt;/h2&gt;

&lt;h3 id=&#34;articles&#34;&gt;Articles&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.cockroachlabs.com/blog/how-cockroachdb-distributes-atomic-transactions/&#34;&gt;How CockroachDB Does Distributed, Atomic Transactions&lt;/a&gt;
In short: they place new values near the original ones and use some kind of a
switch (&amp;ldquo;transaction record&amp;rdquo;) to flip between old and new values.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://solnic.eu/2015/09/18/ditch-your-orm.html&#34;&gt;Ditch Your ORM&lt;/a&gt;
This could be an eye opener for those who are working with ORM. Author had
been working with &lt;a href=&#34;http://datamapper.org/&#34;&gt;Data Mapper&lt;/a&gt; project for over 4 years.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://coding-geek.com/how-databases-work/&#34;&gt;How does a relational database work&lt;/a&gt;
Fantastic article! If you&amp;rsquo;ve always wanted to know how relational DBs work, this
is the best place to start. (&lt;a href=&#34;http://habrahabr.ru/company/mailru/blog/266811/&#34;&gt;Russian&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://antirez.com/news/94&#34;&gt;Clarifications about Redis and Memcached&lt;/a&gt;
Excellent article, which explains some of the differences between Redis and
Memcached.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;presentations&#34;&gt;Presentations&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/imcsummit/imcs2015-2-bus4-myth-about-inmemory-databases-busted&#34;&gt;4 Myths about In-Memory Databases Busted&lt;/a&gt;
A very good presentation, which compares Aerospike, Couchbase, Redis and Cassandra.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>