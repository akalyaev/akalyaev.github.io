<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vim on Home on Rails</title>
    <link>http://homeonrails.com/tags/vim/index.xml</link>
    <description>Recent content in Vim on Home on Rails</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>All rights reserved - 2017</copyright>
    <atom:link href="http://homeonrails.com/tags/vim/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to be productive with almost any text editor</title>
      <link>http://homeonrails.com/2016/05/how-to-be-productive-with-almost-any-editor/</link>
      <pubDate>Mon, 23 May 2016 12:02:11 +0000</pubDate>
      
      <guid>http://homeonrails.com/2016/05/how-to-be-productive-with-almost-any-editor/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://homeonrails.com/pdfs/posts/2016-05-23-how-to-be-productive-with-almost-any-editor/how_to_be_productive_with_almost_any_editor_ru_RU.pdf&#34; title=&#34;Скачать PDF на русском&#34;&gt;
  На русском
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What makes us productive when working with code in the editor? Every day, there
is a new shining plugin, that allows us to do something useful by pressing only
2 keystrokes. Don&amp;rsquo;t get me wrong, I&amp;rsquo;m not against plugins. Hell, I have at
least 40 of them (&lt;a href=&#34;https://git.io/vrg64&#34;&gt;https://git.io/vrg64&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;But, are all of them equally useful? I am certain that some tricks outperform
others in terms of productivity (&lt;strong&gt;20% results in 80% boost&lt;/strong&gt;). These could be
features, built into the editor. You just don&amp;rsquo;t know about them. Here, I&amp;rsquo;ve
tried to collect &lt;strong&gt;the most important ones&lt;/strong&gt;, which don&amp;rsquo;t require you to read a
pile of docs and much time to learn.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;There is no research (not to my knowledge) to backup the list below. If you
think I missed something, leave a comment or two.&lt;/p&gt;

&lt;p&gt;In addition, I&amp;rsquo;ve compared the 5 most popular editors (vim, emacs, idea,
sublime text and atom). I hope it will be interesting for you to see how your
editor is doing relative to others.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;img-rounded&#34; src=&#34;http://homeonrails.com/images/posts/2016-05-23-how-to-be-productive-with-almost-any-editor/trends.png&#34; alt=&#34;&#34; width=&#34;100%&#34; title=&#34;&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Your humble servant is using Vim at his regular job, so you may notice a
certain predisposition. But I try to be open - the second attempt to master
Spacemacs? &lt;a href=&#34;https://github.com/google/xi-editor&#34;&gt;https://github.com/google/xi-editor&lt;/a&gt; ? Who knows..&lt;/p&gt;

&lt;h2 id=&#34;1-fast-switching-between-the-last-two-files&#34;&gt;1. Fast switching between the last two files&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Editor&lt;/th&gt;
&lt;th&gt;Mapping&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Vim&lt;/td&gt;
&lt;td&gt;&lt;code&gt;nnoremap &amp;lt;leader&amp;gt;&amp;lt;leader&amp;gt; &amp;lt;C-^&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Emacs&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(global-set-key (kbd &amp;quot;M-o&amp;quot;)  &#39;mode-line-other-buffer)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Idea&lt;/td&gt;
&lt;td&gt;Ctrl + Tab / Ctrl + Shift + Tab&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Sublime Text&lt;/td&gt;
&lt;td&gt;Ctrl + Tab / Ctrl + Shift + Tab&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Atom&lt;/td&gt;
&lt;td&gt;Ctrl + Tab / Ctrl + Shift + Tab&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Emacs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.emacswiki.org/emacs/SwitchingBuffers#toc5&#34;&gt;https://www.emacswiki.org/emacs/SwitchingBuffers#toc5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://emacsredux.com/blog/2013/04/28/switch-to-previous-buffer/&#34;&gt;http://emacsredux.com/blog/2013/04/28/switch-to-previous-buffer/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Idea:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.jetbrains.com/webide/2013/02/navigating-between-files-in-the-ide-best-practices/&#34;&gt;http://blog.jetbrains.com/webide/2013/02/navigating-between-files-in-the-ide-best-practices/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;2-running-tests-without-leaving-the-editor&#34;&gt;2. Running tests without leaving the editor&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Editor&lt;/th&gt;
&lt;th&gt;The way&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Vim&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/janko-m/vim-test&#34;&gt;https://github.com/janko-m/vim-test&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Emacs&lt;/td&gt;
&lt;td&gt;no uniform interface, but there are packages for different languages&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Idea&lt;/td&gt;
&lt;td&gt;through the UI plus Ctrl + R to restart&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Sublime Text&lt;/td&gt;
&lt;td&gt;no uniform interface, but there are packages for different languages&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Atom&lt;/td&gt;
&lt;td&gt;no uniform interface, but there are packages for different languages&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Emacs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;clojure - &lt;a href=&#34;https://github.com/clojure-emacs/cider&#34;&gt;https://github.com/clojure-emacs/cider&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ruby - &lt;a href=&#34;https://github.com/pezra/rspec-mode&#34;&gt;https://github.com/pezra/rspec-mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;erlang - &lt;a href=&#34;https://github.com/tjarvstrand/edts&#34;&gt;https://github.com/tjarvstrand/edts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;python - &lt;a href=&#34;https://github.com/ionrock/pytest-el&#34;&gt;https://github.com/ionrock/pytest-el&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;golang - &lt;a href=&#34;https://github.com/nlamirault/gotest.el&#34;&gt;https://github.com/nlamirault/gotest.el&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Idea:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;for some languages, you&amp;rsquo;ll need to configure Idea, e.g. golang - &lt;a href=&#34;https://github.com/go-lang-plugin-org/go-lang-idea-plugin/wiki/Documentation&#34;&gt;https://github.com/go-lang-plugin-org/go-lang-idea-plugin/wiki/Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.1/rerunning-tests.html&#34;&gt;https://www.jetbrains.com/help/idea/2016.1/rerunning-tests.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sublime Text:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ruby - &lt;a href=&#34;https://github.com/maltize/sublime-text-2-ruby-tests&#34;&gt;https://github.com/maltize/sublime-text-2-ruby-tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;python - &lt;a href=&#34;https://damnwidget.github.io/anaconda/tests_runner/&#34;&gt;https://damnwidget.github.io/anaconda/tests_runner/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;scala - &lt;a href=&#34;https://github.com/jarhart/SublimeSBT&#34;&gt;https://github.com/jarhart/SublimeSBT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Atom:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ruby - &lt;a href=&#34;https://github.com/moxley/atom-ruby-test&#34;&gt;https://github.com/moxley/atom-ruby-test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;elixir - &lt;a href=&#34;https://github.com/indiejames/atom-iex&#34;&gt;https://github.com/indiejames/atom-iex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(many) - &lt;a href=&#34;https://atom.io/packages/script&#34;&gt;https://atom.io/packages/script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://brendankemp.com/essays/atom-is-ready-to-be-your-editor/&#34;&gt;http://brendankemp.com/essays/atom-is-ready-to-be-your-editor/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;3-terminal-emulator&#34;&gt;3. Terminal emulator&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Editor&lt;/th&gt;
&lt;th&gt;Terminal emulator&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Vim&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;/td&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Neovim&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;/td&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Emacs&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;/td&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Idea&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;/td&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Sublime Text&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;/td&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Atom&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;em&gt;Note on terminal text editors&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can easily switch to the actual terminal using Ctrl + z (this will suspend
the editor) and get back by entering fg. However, I would say that it is not
the same as having a terminal emulator running in an editor&amp;rsquo;s window below. The
reason is simple - context. Most often, &lt;strong&gt;you&amp;rsquo;ll want to look at the output of
some command and the code at the same time&lt;/strong&gt;. For example, seeing an error&amp;rsquo;s
stack trace and the code at the same time is far better than performing these
actions in turn (you could easily forget the exact line number or some other
detail).&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t want to type fg, there is a hack:&lt;/p&gt;

&lt;p&gt;zsh: &lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh/blob/master/plugins/fancy-ctrl-z/fancy-ctrl-z.plugin.zsh&#34;&gt;https://github.com/robbyrussell/oh-my-zsh/blob/master/plugins/fancy-ctrl-z/fancy-ctrl-z.plugin.zsh&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;fish:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bind \ck &#39;if test -z (commandline) ; fg %; else ; clear; commandline &amp;quot;&amp;quot;; end&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another advantage of having a terminal emulator: copy-pasting between the
terminal emulator and your code is much easier, and you &lt;strong&gt;get completion in the
code for things in the terminal&lt;/strong&gt; (thanks to
&lt;a href=&#34;https://www.reddit.com/user/somebodddy&#34;&gt;somebodddy&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Sublime Text: &lt;a href=&#34;https://packagecontrol.io/packages/Terminal&#34;&gt;https://packagecontrol.io/packages/Terminal&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Atom: &lt;a href=&#34;https://atom.io/packages/term3&#34;&gt;https://atom.io/packages/term3&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;4-go-to-definition&#34;&gt;4. Go to definition&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Editor&lt;/th&gt;
&lt;th&gt;Mapping&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Vim&lt;/td&gt;
&lt;td&gt;Ctrl + ] / Ctrl - T using ctags&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Emacs&lt;/td&gt;
&lt;td&gt;M-. / M-* using ctags&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Idea&lt;/td&gt;
&lt;td&gt;Ctrl + B or Ctrl + click / Ctrl + Tab&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Sublime Text&lt;/td&gt;
&lt;td&gt;Ctrl + click / Ctrl + right click&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Atom&lt;/td&gt;
&lt;td&gt;Ctrl + Alt + down / Ctrl + Alt + up&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Emacs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.emacswiki.org/emacs/EmacsTags&#34;&gt;https://www.emacswiki.org/emacs/EmacsTags&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jacktasia/dumb-jump&#34;&gt;https://github.com/jacktasia/dumb-jump&lt;/a&gt; (uses &lt;code&gt;ag&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sublime Text: &lt;a href=&#34;https://gist.github.com/kendellfab/6135193#gistcomment-1768760&#34;&gt;https://gist.github.com/kendellfab/6135193#gistcomment-1768760&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Atom: &lt;a href=&#34;https://github.com/atom/symbols-view&#34;&gt;https://github.com/atom/symbols-view&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Generating tags using git hooks: &lt;a href=&#34;http://tbaggery.com/2011/08/08/effortless-ctags-with-git.html&#34;&gt;http://tbaggery.com/2011/08/08/effortless-ctags-with-git.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;5-repl-advanced&#34;&gt;5. REPL (Advanced)&lt;/h2&gt;

&lt;p&gt;If you have a REPL alongside the editor - excellent! You can eval some code or
lookup some documentation (&lt;a href=&#34;http://tonsky.me/blog/interactive-development/&#34;&gt;http://tonsky.me/blog/interactive-development/&lt;/a&gt;).&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Editor&lt;/th&gt;
&lt;th&gt;REPL&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Vim&lt;/td&gt;
&lt;td&gt;yes (few languages)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Neovim&lt;/td&gt;
&lt;td&gt;yes (many languages)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Emacs&lt;/td&gt;
&lt;td&gt;yes (many languages)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Idea&lt;/td&gt;
&lt;td&gt;yes (many languages)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Sublime Text&lt;/td&gt;
&lt;td&gt;yes (many languages)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/td&gt;
&lt;td&gt;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Atom&lt;/td&gt;
&lt;td&gt;yes (few languages)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Vim:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;clojure: &lt;a href=&#34;https://github.com/tpope/vim-fireplace&#34;&gt;https://github.com/tpope/vim-fireplace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If language has a command-line REPL, you can always execute: &lt;code&gt;:!&amp;lt;repl&amp;gt;&lt;/code&gt; (e.g. &lt;code&gt;:!irb&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Neovim: &lt;a href=&#34;https://github.com/kassio/neoterm&#34;&gt;https://github.com/kassio/neoterm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Emacs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ruby - &lt;a href=&#34;https://github.com/dgutov/robe&#34;&gt;https://github.com/dgutov/robe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;scala - &lt;a href=&#34;https://github.com/ensime/ensime-emacs&#34;&gt;https://github.com/ensime/ensime-emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;clojure - &lt;a href=&#34;https://github.com/clojure-emacs/cider&#34;&gt;https://github.com/clojure-emacs/cider&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Idea:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;clojure - &lt;a href=&#34;https://cursive-ide.com/&#34;&gt;https://cursive-ide.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sublime Text: &lt;a href=&#34;https://packagecontrol.io/packages/SublimeREPL&#34;&gt;https://packagecontrol.io/packages/SublimeREPL&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Atom:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;clojure - &lt;a href=&#34;https://atom.io/packages/proto-repl&#34;&gt;https://atom.io/packages/proto-repl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;haskell - &lt;a href=&#34;https://atom.io/packages/ide-haskell-repl&#34;&gt;https://atom.io/packages/ide-haskell-repl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;the-end-list&#34;&gt;The end list&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Fast switching between the last two files&lt;/li&gt;
&lt;li&gt;Running tests without leaving the editor&lt;/li&gt;
&lt;li&gt;Terminal emulator&lt;/li&gt;
&lt;li&gt;Go to definition&lt;/li&gt;
&lt;li&gt;REPL (Advanced)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;3 and 5 could be alternatively solved using a terminal multiplexer. For
example, my favorite &lt;a href=&#34;https://tmux.github.io/&#34;&gt;https://tmux.github.io/&lt;/a&gt; .&lt;/p&gt;

&lt;h2 id=&#34;bonus&#34;&gt;Bonus&lt;/h2&gt;

&lt;p&gt;1) Do not repeat yourself (&amp;ldquo;.&amp;rdquo; in Vim, macros [atom - &lt;a href=&#34;https://atom.io/packages/atom-keyboard-macros]&#34;&gt;https://atom.io/packages/atom-keyboard-macros]&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;2) Operate on objects: blocks, functions, etc., not individual characters (motions and text objects &lt;a href=&#34;https://github.com/kana/vim-textobj-user/wiki&#34;&gt;https://github.com/kana/vim-textobj-user/wiki&lt;/a&gt; in Vim)&lt;/p&gt;

&lt;p&gt;3) Quickly navigate through code using AceJump-like plugins&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;vim - &lt;a href=&#34;https://github.com/easymotion/vim-easymotion&#34;&gt;https://github.com/easymotion/vim-easymotion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;idea - &lt;a href=&#34;https://github.com/johnlindquist/AceJump&#34;&gt;https://github.com/johnlindquist/AceJump&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;emacs - &lt;a href=&#34;https://github.com/abo-abo/avy&#34;&gt;https://github.com/abo-abo/avy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;sublime text - &lt;a href=&#34;https://packagecontrol.io/packages/EasyMotion&#34;&gt;https://packagecontrol.io/packages/EasyMotion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;atom - &lt;a href=&#34;https://atom.io/packages/jumpy&#34;&gt;https://atom.io/packages/jumpy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My current use of &lt;code&gt;vim-easymotion&lt;/code&gt; reduced to only one &lt;a href=&#34;https://git.io/vrzAE&#34;&gt;https://git.io/vrzAE&lt;/a&gt;
mapping that allows me to jump to any location in the current file. Simple and
effective!&lt;/p&gt;

&lt;p&gt;4) Use multiple selection/cursors&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;vim - &lt;a href=&#34;https://github.com/terryma/vim-multiple-cursors&#34;&gt;https://github.com/terryma/vim-multiple-cursors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;idea - F6 and the rest&lt;/li&gt;
&lt;li&gt;emacs - &lt;a href=&#34;https://github.com/magnars/multiple-cursors.el&#34;&gt;https://github.com/magnars/multiple-cursors.el&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;sublime text - Ctrl + D&lt;/li&gt;
&lt;li&gt;atom - Ctrl + D&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;5) Open files using fuzzy search&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;vim - &lt;a href=&#34;https://github.com/junegunn/fzf.vim&#34;&gt;https://github.com/junegunn/fzf.vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;idea - Shift + Ctrl + O (&lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.1/navigating-to-class-file-or-symbol-by-name.html&#34;&gt;https://www.jetbrains.com/help/idea/2016.1/navigating-to-class-file-or-symbol-by-name.html&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;emacs - &lt;a href=&#34;https://github.com/bbatsov/projectile&#34;&gt;https://github.com/bbatsov/projectile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;sublime text - Ctrl + P (&lt;a href=&#34;http://docs.sublimetext.info/en/latest/file_management/file_management.html&#34;&gt;http://docs.sublimetext.info/en/latest/file_management/file_management.html&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;atom - &lt;a href=&#34;https://github.com/atom/fuzzy-finder&#34;&gt;https://github.com/atom/fuzzy-finder&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;As you can see, each of the editors does the job. Some slightly better, others
- a little worse.&lt;/p&gt;

&lt;p&gt;Another finding: Vim is best suited for polyglot developers
(&lt;a href=&#34;http://searchsoftwarequality.techtarget.com/definition/polyglot-programming&#34;&gt;http://searchsoftwarequality.techtarget.com/definition/polyglot-programming&lt;/a&gt;)
because it provides plugins and unified interface for multiple languages. Emacs
offers more power, but you need to configure all the packages to make mappings
the same. It may be a good idea for Spacemacs, is it?&lt;/p&gt;

&lt;p&gt;Useful links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://sheerun.net/2014/03/21/how-to-boost-your-vim-productivity/&#34;&gt;https://sheerun.net/2014/03/21/how-to-boost-your-vim-productivity/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://danielmiessler.com/blog/enhancements-to-shell-and-vim-productivity/&#34;&gt;https://danielmiessler.com/blog/enhancements-to-shell-and-vim-productivity/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Did I miss something? You can leave a comment or send me an email.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TrueColor in Gnome Terminal, Tmux and Neovim</title>
      <link>http://homeonrails.com/2016/05/truecolor-in-gnome-terminal-tmux-and-neovim/</link>
      <pubDate>Wed, 04 May 2016 11:41:10 +0000</pubDate>
      
      <guid>http://homeonrails.com/2016/05/truecolor-in-gnome-terminal-tmux-and-neovim/</guid>
      <description>&lt;p&gt;Here is where we are right now: &lt;a href=&#34;https://gist.github.com/XVilka/8346728&#34;&gt;https://gist.github.com/XVilka/8346728&lt;/a&gt; . As you
can see, most of the editors and terminals now support TrueColor (16 million
colors).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The result&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Difference between TrueColor (24bits - 16 million colors) and &amp;ldquo;256colors&amp;rdquo; (8bits - 256 colors):&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;img-rounded&#34; src=&#34;http://homeonrails.com/images/posts/2016-05-05-truecolor-in-gnome-terminal-tmux-and-neovim/diff1.png&#34; alt=&#34;&#34; width=&#34;100%&#34; title=&#34;&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Original theme (&lt;a href=&#34;https://github.com/morhetz/gruvbox&#34;&gt;gruvbox&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;img-rounded&#34; src=&#34;http://homeonrails.com/images/posts/2016-05-05-truecolor-in-gnome-terminal-tmux-and-neovim/orig.png&#34; alt=&#34;&#34; width=&#34;100%&#34; title=&#34;&#34;/&gt;&lt;/p&gt;

&lt;p&gt;TrueColor looks better and comfier for your eyes. So, there is no excuse not to use it.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;gnome-terminal&#34;&gt;Gnome Terminal&lt;/h2&gt;

&lt;p&gt;gnome-terminal has to be in version linked against &lt;code&gt;libvte &amp;gt;= 0.36&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;1) Check&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ldd /usr/lib/gnome-terminal/gnome-terminal-server | grep libvte
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2) Install&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo add-apt-repository ppa:gnome3-team/gnome3-staging
sudo apt-get update
sudo apt-get install -y gnome-terminal
sudo add-apt-repository -r ppa:gnome3-team/gnome3-staging
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3) Restart gnome-terminal-server (I&amp;rsquo;ve just rebooted my machine, but killing the corresponding process should also do the job).&lt;/p&gt;

&lt;p&gt;Links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://askubuntu.com/questions/512525/how-to-enable-24bit-true-color-support-in-gnome-terminal&#34;&gt;https://askubuntu.com/questions/512525/how-to-enable-24bit-true-color-support-in-gnome-terminal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;tmux&#34;&gt;Tmux&lt;/h2&gt;

&lt;p&gt;tmux must be &lt;code&gt;&amp;gt;= 2.2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;1) Check&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tmux -V
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2) Kill tmux (&lt;code&gt;tmux kill-server&lt;/code&gt;) and (optionally) remove it&lt;/p&gt;

&lt;p&gt;3) Install&lt;/p&gt;

&lt;p&gt;On Ubuntu:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install -y libevent-dev libncurses-dev build-essential
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;wget https://github.com/tmux/tmux/releases/download/2.2/tmux-2.2.tar.gz &amp;amp;&amp;amp; \
  tar -xzvf tmux-2.2.tar.gz &amp;amp;&amp;amp; \
  cd tmux-2.2 &amp;amp;&amp;amp; \
  ./configure &amp;amp;&amp;amp; \
  make &amp;amp;&amp;amp; \
  sudo make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4) Alias tmux or set $TERM env variable&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;alias tmux=&amp;quot;env TERM=xterm-256color tmux&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5) Set option, which overrides default terminal&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# .tmux.conf
set-option -ga terminal-overrides &amp;quot;,xterm-256color:Tc&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;6) Check (inside tmux)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tmux info | grep Tc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the command reports Tc: [missing], then support for 24-bit colors has not been enabled properly because the terminal-overrides option may have specified the outer terminal’s $TERM value incorrectly or because tmux may have been reattached to an entirely different outer terminal altogether.&lt;/p&gt;

&lt;p&gt;Links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tmux/tmux&#34;&gt;https://github.com/tmux/tmux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sunaku.github.io/tmux-24bit-color.html#usage&#34;&gt;https://sunaku.github.io/tmux-24bit-color.html#usage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;neovim&#34;&gt;Neovim&lt;/h2&gt;

&lt;p&gt;1) Set env variable&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&amp;quot; .nvimrc
let $NVIM_TUI_ENABLE_TRUE_COLOR=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2) Pick a theme, which does not force 256 colors &lt;code&gt;if !has(&#39;gui_running&#39;)&lt;/code&gt; or checks for &lt;code&gt;neovim&lt;/code&gt; (&lt;a href=&#34;https://github.com/neovim/neovim/issues/793&#34;&gt;discussion&lt;/a&gt;):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/frankier/neovim-colors-solarized-truecolor-only&#34;&gt;solarized fork&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/morhetz/gruvbox&#34;&gt;gruvbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/neovim/neovim/issues/793#issuecomment-59628883&#34;&gt;https://github.com/neovim/neovim/issues/793#issuecomment-59628883&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chris.chowie.net/2015/04/19/True-colour-with-neovim-tmux-and-iterm2/&#34;&gt;https://chris.chowie.net/2015/04/19/True-colour-with-neovim-tmux-and-iterm2/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My dotfiles: &lt;a href=&#34;https://github.com/melekes/dotfiles&#34;&gt;https://github.com/melekes/dotfiles&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Vim: Open current line on Atlassian Stash (Bitbucket Server)</title>
      <link>http://homeonrails.com/2016/04/vim-open-current-line-on-atlassian-stash/</link>
      <pubDate>Thu, 28 Apr 2016 11:47:36 +0000</pubDate>
      
      <guid>http://homeonrails.com/2016/04/vim-open-current-line-on-atlassian-stash/</guid>
      <description>&lt;p&gt;This is based on Felix Geisendörfer &lt;a href=&#34;http://felixge.de/2013/08/08/vim-trick-open-current-line-on-github.html&#34;&gt;Vim Trick: Open current line on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1. Create a git alias&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# ~/.gitconfig
[alias]
  url =! bash -c &#39;git config --get remote.origin.url | sed -E &amp;quot;s/.+\\.ru\\\\/\\(.+\\)\\\\/\\(.+\\)\\.git$/https:\\\\/\\\\/stash\\\\.yourcompanyname\\\\.com\\\\/projects\\\\/\\\\1\\\\/repos\\\\/\\\\2\\\\/browse/g&amp;quot;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change domain name from &amp;lsquo;stash.yourcompanyname.com&amp;rsquo; to something real. Pay attention to &amp;lsquo;.&amp;rsquo; escaping.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2. Create a mapping in Vim&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;; ~/.vimrc
nnoremap &amp;lt;leader&amp;gt;ou :!echo `git url`/%?at=`git rev-parse HEAD`\#&amp;lt;C-R&amp;gt;=line(&#39;.&#39;)&amp;lt;CR&amp;gt; \| xargs open&amp;lt;CR&amp;gt;&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Step 3. Enjoy&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;My dotfiles: &lt;a href=&#34;https://github.com/melekes/dotfiles&#34;&gt;https://github.com/melekes/dotfiles&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>tmux / Автоматическое восстановление сессии</title>
      <link>http://homeonrails.com/2015/07/tmux-slash-avtomatichieskoie-vosstanovlieniie-siessii/</link>
      <pubDate>Fri, 17 Jul 2015 10:35:07 +0000</pubDate>
      
      <guid>http://homeonrails.com/2015/07/tmux-slash-avtomatichieskoie-vosstanovlieniie-siessii/</guid>
      <description>&lt;p&gt;Не так давно собрался с силами, и настроил у себя в tmux автоматическое
сохранение и восстановление последней сессии. По прошествии месяца могу с
уверенностью сказать - просто бомба!&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;img-rounded&#34; src=&#34;http://homeonrails.com/images/posts/2015-07-17-tmux-slash-avtomatichieskoie-vosstanovlieniie-siessii/ILKC62E3GC.jpg&#34; alt=&#34;&#34;/ width=&#34;694&#34; title=&#34;tmux / Автоматическое восстановление сессии&#34;&gt;&lt;/p&gt;

&lt;p&gt;Представьте себе, вы выключили компьютер (не все так поступают, я знаю) и
отправились домой. Вечером, отправив жену готовить борщ, и удобно устроившись
на любимом диване, предварительно включив теплый ламповый свет, вы открываете
свой лэптоп, запускаете shell и вуаля - &lt;strong&gt;все сплиты на том же самом месте, где
они и были в последний раз. Более того, Vim уже запущен и курсор стоит на той
же строке, где он и был в последний раз&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Для того, чтобы данное чудо заработало и у вас, нам потребуется &lt;a href=&#34;https://github.com/tmux-plugins/tpm&#34;&gt;Tmux Plugin
Manager&lt;/a&gt; (сокращенно, tpm):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;(примечание: нужен tmux &amp;gt;= 1.9)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Теперь добавим следующее в конец .tmux.conf:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# .tmux.conf

set -g @plugin &#39;tmux-plugins/tpm&#39;
set -g @plugin &#39;tmux-plugins/tmux-sensible&#39;
set -g @plugin &#39;tmux-plugins/tmux-resurrect&#39;
set -g @plugin &#39;tmux-plugins/tmux-continuum&#39;

run &#39;~/.tmux/plugins/tpm/tpm&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Далее остается только загрузить наши изменения и установить плагины:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ tmux source ~/.tmux.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Для установки плагинов нажмите &lt;code&gt;prefix - I&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Для комфортной работы стоит добавить пару опций. По умолчанию, tmux-continuum
(плагин, который автоматически сохраняет tmux окружение) не восстанавливает его
при запуске tmux. Что ж, исправим это недоразумение:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# .tmux.conf

set -g @continuum-restore &#39;on&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Для того, чтобы при загрузке восстанавливались Vim (Neovim) сессии, нужно&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;установить плагин &lt;a href=&#34;https://github.com/tpope/vim-obsession&#34;&gt;https://github.com/tpope/vim-obsession&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;добавить пару строк в .tmux.conf:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;# .tmux.conf

# for vim
set -g @resurrect-strategy-vim &#39;session&#39;
# for neovim
set -g @resurrect-strategy-nvim &#39;session&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Стоит отметить, что можно стартовать не только Vim, но и любые другие программы
- ssh, psql, rails console, которые были запущены в прошлый раз. Для этого,
  правда, надо добавить их в конфиг:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# .tmux.conf

set -g @resurrect-processes &#39;ssh psql mysql sqlite3&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Также у данного плагина (&lt;a href=&#34;https://github.com/tmux-plugins/tmux-resurrect&#34;&gt;https://github.com/tmux-plugins/tmux-resurrect&lt;/a&gt;) есть и
несколько интересных экспериментальный опций, таких как сохранение истории для
каждого сплита и сохранение его содержимого.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>4 Vim Plugins Nobody Knows About</title>
      <link>http://homeonrails.com/2015/06/4-vim-plugins-nobody-knows-about/</link>
      <pubDate>Thu, 04 Jun 2015 22:53:15 +0000</pubDate>
      
      <guid>http://homeonrails.com/2015/06/4-vim-plugins-nobody-knows-about/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been using these four plugins for a really long time. And they are
wonderful. But each time coming on Github and seeing the number of stars, I
think that few people actually know about them.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;1-autosave&#34;&gt;1. AutoSave&lt;/h2&gt;

&lt;p&gt;AutoSave - automatically save changes to disk without having to use :w (or any
binding to it) every time a buffer has been modified.&lt;/p&gt;

&lt;p&gt;Why on earth we need to type &lt;code&gt;:w&lt;/code&gt; or hit some combo &lt;code&gt;&amp;lt;leader&amp;gt;-s&lt;/code&gt; to save
changes to some file. We live in the 21st century, when &lt;a href=&#34;http://www.mars-one.com/&#34;&gt;people are going to
Mars&lt;/a&gt;! And yet, we&amp;rsquo;re still repeatedly saving our
files. Stop doing this!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/907th/vim-auto-save&#34;&gt;https://github.com/907th/vim-auto-save&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I use it with these settings:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;let g:auto_save = 1
let g:auto_save_in_insert_mode = 0
let g:auto_save_silent = 1
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-vim-bracketed-paste&#34;&gt;2. vim-bracketed-paste&lt;/h2&gt;

&lt;p&gt;vim-bracketed-paste enables transparent pasting into vim. (i.e. no more :set paste!)&lt;/p&gt;

&lt;p&gt;Another great plugin that removes the pain when copying between Vim and OS. Time-saver.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ConradIrwin/vim-bracketed-paste&#34;&gt;https://github.com/ConradIrwin/vim-bracketed-paste&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;3-file-line&#34;&gt;3. file-line&lt;/h2&gt;

&lt;p&gt;Plugin for vim to enable opening a file in a given line.&lt;/p&gt;

&lt;p&gt;For example, if you have some of the RSpec tests failed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Failed examples:

rspec ./spec/support/breadcrumbs.rb:6 # Breadcrumbs logged in as admin user Users behaves like a page with #index breadcrumbs shows the expected breadcrumbs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you may want to open a file with cursor on line 6:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ vim ./spec/support/breadcrumbs.rb:6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And this plugin allows you to do exactly that.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/bogado/file-line&#34;&gt;https://github.com/bogado/file-line&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;4-vim-visual-star-search&#34;&gt;4. vim-visual-star-search&lt;/h2&gt;

&lt;p&gt;Start a * or # search from a visual block.&lt;/p&gt;

&lt;p&gt;Another plugin, which I constantly use. Quite often, there is a situation where
I want to see all the places where a certain variable is used. And having my
cursor on it, all I left to do is to press &lt;code&gt;*&lt;/code&gt; to highlight all the
occurrences.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/nelstrom/vim-visual-star-search&#34;&gt;https://github.com/nelstrom/vim-visual-star-search&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Example of using two last plugins (vim-visual-star-search and file-line):&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/5szdg2zqk0tjg1eb81vjpdmci?autoplay=1&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/5szdg2zqk0tjg1eb81vjpdmci.png&#34; alt=&#34;asciicast&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Looking for more stuff? Check out &lt;a href=&#34;https://github.com/melekes/dotfiles&#34;&gt;my dotfiles&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Vim: Connect to Clojure nREPL inside the VM</title>
      <link>http://homeonrails.com/2014/06/vim-connect-to-clojure-nrepl-inside-the-vm/</link>
      <pubDate>Wed, 04 Jun 2014 12:11:45 +0000</pubDate>
      
      <guid>http://homeonrails.com/2014/06/vim-connect-to-clojure-nrepl-inside-the-vm/</guid>
      <description>&lt;p&gt;For Vim to talk to nREPL we will be using fantastic
&lt;a href=&#34;https://github.com/tpope/vim-fireplace&#34;&gt;fireplace.vim&lt;/a&gt; plugin. If you have
Clojure installed locally, this plugin will connect to its nREPL automatically
based on &lt;code&gt;.nrepl-port&lt;/code&gt;. But if you, like me, have Clojure inside the VM
(VirtualBox or VMWare, or something else), you need to connect to its nREPL
manually using &lt;code&gt;:Connect&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;This function has the following syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:Connect {proto}://{host}:{port} {path}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Most of the options are self-explanatory, except to say that &lt;code&gt;proto&lt;/code&gt; (protocol)
is always &lt;code&gt;nrepl&lt;/code&gt; and &lt;code&gt;path&lt;/code&gt; is your project&amp;rsquo;s location.&lt;/p&gt;

&lt;p&gt;I am using Vagrant to manage my VMs and this one, as the rest,
configured with private network.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Vagrant.configure(&amp;quot;2&amp;quot;) do |config|
  config.vm.network &amp;quot;private_network&amp;quot;, ip: &amp;quot;192.168.50.4&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we need to start nREPL inside the guest machine.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$&amp;gt; lein repl :start :host 0.0.0.0 :port 4242
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You could omit the &lt;code&gt;:port&lt;/code&gt; option, in which case leiningen will use a
random port.&lt;/p&gt;

&lt;p&gt;One thing remains is to connect to nREPL.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:Connect nrepl://192.168.50.4:4242
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you should be able to run fireplace.vim commands. Try &lt;code&gt;:Doc get&lt;/code&gt; for
example.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Copy and paste between Vim and OS</title>
      <link>http://homeonrails.com/2014/01/copy-and-paste-between-vim-and-os/</link>
      <pubDate>Thu, 09 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://homeonrails.com/2014/01/copy-and-paste-between-vim-and-os/</guid>
      <description>&lt;p&gt;When I first encountered this problem it slightly
puzzled me. &amp;ldquo;Why can not I press &lt;code&gt;ctrl-c&lt;/code&gt; to copy the text and
&lt;code&gt;ctrl-v&lt;/code&gt; to paste?&amp;ldquo;- I asked myself. Indeed, the majority of source code editors
able to do this. And yes, I got used to this dammit!&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Well, Vim is primarily a console text editor. Of course, there is a GUI version - GVim (or MacVim for MacOS), but most prefer to stay in the console, where we can use such wonderful tools as &lt;a href=&#34;http://en.wikipedia.org/wiki/Tmux&#34;&gt;tmux&lt;/a&gt; and &lt;a href=&#34;https://github.com/remiprev/teamocil&#34;&gt;teamochil&lt;/a&gt; *.&lt;/p&gt;

&lt;h3 id=&#34;first-attempt&#34;&gt;First attempt&lt;/h3&gt;

&lt;p&gt;The first more or less acceptable solution offered &lt;a href=&#34;https://twitter.com/gumayunov&#34;&gt;Victor Gumayunov&lt;/a&gt;. Few people know, but if you press and hold &lt;code&gt;ctrl + alt&lt;/code&gt;, you will be able to select a text block using the mouse and, by clicking its right button, copy it.&lt;/p&gt;

&lt;h3 id=&#34;second-attempt&#34;&gt;Second attempt&lt;/h3&gt;

&lt;p&gt;And at first, it suited me. But it has lasted a short time and I started
looking for other ways out. The next approach was to use of custom bindings for tmux, which use xclip utility (pbcopy on MacOS) to copy the contents of the system&amp;rsquo;s buffer into tmux&amp;rsquo;s buffer and back.&lt;/p&gt;

&lt;p&gt;For this you was have to write:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# move x clipboard into tmux paste buffer
bind C-p run &amp;quot;tmux set-buffer \&amp;quot;$(xclip -o)\&amp;quot;; tmux paste-buffer&amp;quot;
# move tmux copy buffer into x clipboard
bind C-y run &amp;quot;tmux save-buffer - | xclip -i&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;in your &lt;code&gt;.tmux.conf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But do not rush to do it :)&lt;/p&gt;

&lt;h3 id=&#34;third-attempt-the-lucky-one&#34;&gt;Third attempt (the lucky one)&lt;/h3&gt;

&lt;p&gt;While getting to know Vim more tightly, I learned that it has support
for system buffer. To work with it, Vim has two registers &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;+&lt;/code&gt;
(see &lt;code&gt;:h registers&lt;/code&gt;). &amp;ldquo;Sounds great&amp;rdquo; - I thought.&lt;/p&gt;

&lt;p&gt;One catch - Vim must be compiled with &lt;code&gt;+clipboard&lt;/code&gt;. To check whether you have support for clipboard run:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ vim --version | grep clipboard
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The easiest way to fix this &lt;strong&gt;for most Linux&amp;rsquo;es&lt;/strong&gt; is to install GVim (but continue to use its console version).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo apt-get install vim-gnome
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;For MacOS&lt;/strong&gt; you can get Vim with &lt;code&gt;+clipboard&lt;/code&gt; via Homebrew or download and install MacVim &lt;a href=&#34;http://code.google.com/p/macvim/downloads/list&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew install vim
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Look inside /Applications/MacVim.app/Contents/MacOS, and you’ll see that the app provides two binaries: MacVim, which launches the GUI, and Vim, which runs in the Terminal with the same feature set. Both versions include the &lt;code&gt;+clipboard&lt;/code&gt; feature.&lt;/p&gt;

&lt;p&gt;The last thing left to do - something to get rid of the need to
to type &lt;code&gt;&amp;quot;*p&lt;/code&gt; and &lt;code&gt;&amp;quot;*y&lt;/code&gt; prefixes. I don&amp;rsquo;t want copy and paste between Vim and OS was some special occasion, I want everything to be transparent to the user. It turned out, you just need to add this line to your &lt;code&gt;.vimrc&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;set clipboard=unnamed &amp;quot; or unnamedplus if you have X11
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now all operations such as &lt;code&gt;yy&lt;/code&gt;, &lt;code&gt;D&lt;/code&gt;, and &lt;code&gt;p&lt;/code&gt; work with the clipboard. No need to prefix them with &lt;code&gt;&amp;quot;*&lt;/code&gt; or &lt;code&gt;&amp;quot;+&lt;/code&gt;. Sounds like magic, right?!&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/x19YZF4YfLs&#34; frameborder=&#34;0&#34; allowfullscreen=&#34;true&#34;&gt;       &lt;/iframe&gt;

&lt;p&gt;* these utilities are among the best in my humble opinion and they are helping me every day&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Готовые Vim сборки VS свои детища</title>
      <link>http://homeonrails.com/2013/07/gotovyie-vim-sborki-vs-svoi-dietishcha/</link>
      <pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://homeonrails.com/2013/07/gotovyie-vim-sborki-vs-svoi-dietishcha/</guid>
      <description>&lt;p&gt;Сейчас существует большое количество готовых Vim сборок. Они предоставляют богатые
возможности вкупе с расширенной плагинами функциональностью. В противоположность им,
есть чистый .vimrc и ваша фантазия.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Что лучше выбрать для старта? Сборки позволяют быстро спрыгнуть с IDE на Vim.
Хотя некоторые опытные вимеры считают, что правильным путем является &#34;Начало с нуля&#34;,
когда вы постепенно улучшаете Vim каждый день, уча и привнося что-то новое.&lt;/p&gt;

&lt;p&gt;I still think the right path is to start with an unconfigured, stock Vim distribution,
but to each their own.” - &lt;a href=&#34;http://statico.github.io/vim2.html&#34; target=&#34;_blank&#34;&gt;Ian Langworth’s &#34;Everything I Missed in &#34;Vim After 11 Years&#34;&#34;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Концепция постепенного развития очень хорошо описана в статье &lt;a href=&#34;http://ctoomey.com/posts/an-incremental-approach-to-vim/&#34; target=&#34;_blank&#34;&gt;Chris Toomey &#34;An Incremental Approach to Vim&#34;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;В своем докладе я поделился мыслями по поводу плюсов того и другого. Также были
рассмотрены текущие плагин-менеджеры и их внутреннее устройство.
P.S. В конце есть список очень хороших статей, с которыми не грех ознакомиться.&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;b4b710d0c2370130997122e18eedc69a&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

</description>
    </item>
    
  </channel>
</rss>