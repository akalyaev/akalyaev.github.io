<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Home on Rails</title>
    <link>http://homeonrails.com/tags/golang/</link>
    <description>Recent content in Golang on Home on Rails</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>All rights reserved</copyright>
    <lastBuildDate>Sat, 03 Mar 2018 13:20:11 +0400</lastBuildDate>
    
	<atom:link href="http://homeonrails.com/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Debugging the Memory Leak in Tendermint</title>
      <link>http://homeonrails.com/2018/03/debugging-the-memory-leak-in-tendermint/</link>
      <pubDate>Sat, 03 Mar 2018 13:20:11 +0400</pubDate>
      
      <guid>http://homeonrails.com/2018/03/debugging-the-memory-leak-in-tendermint/</guid>
      <description>This article was originally published on [Medium]](https://blog.cosmos.network/debugging-the-memory-leak-in-tendermint-210186711420).
I have spent the last week looking for clues and writing test cases in order to find and fix the memory leak in Tendermint. For those of you who don’t know, Tendermint Core is a Byzantine Fault Tolerant (BFT) middleware that takes a state transition machine — written in any programming language — and securely replicates it on many machines. It is also the foundation of Cosmos — our solution for scaling blockchains.</description>
    </item>
    
    <item>
      <title>Abstracting the logger interface in Go</title>
      <link>http://homeonrails.com/2017/06/abstracting-the-logger-interface-in-go/</link>
      <pubDate>Tue, 06 Jun 2017 22:35:01 +0200</pubDate>
      
      <guid>http://homeonrails.com/2017/06/abstracting-the-logger-interface-in-go/</guid>
      <description>Wrote a blog post a few days ago for my company&amp;rsquo;s blog about our experience of moving from a static logger to an interface and adapter for the go-kit log package.
https://blog.cosmos.network/abstracting-the-logger-interface-in-go-4cf96bf90bb7</description>
    </item>
    
    <item>
      <title>CircleCI config for multipackage Golang projects</title>
      <link>http://homeonrails.com/2017/02/circleci-config-for-multipackage-golang-projects/</link>
      <pubDate>Mon, 06 Feb 2017 10:54:24 +0400</pubDate>
      
      <guid>http://homeonrails.com/2017/02/circleci-config-for-multipackage-golang-projects/</guid>
      <description>&lt;p&gt;Multipackage Golang project - project, consisting of several packages. When
testing you usually do something like &lt;code&gt;go test ./...&lt;/code&gt;, when getting all the
dependencies - &lt;code&gt;go get ./...&lt;/code&gt;. There may be or may not be a Go package at the
root level. Examples: &lt;a href=&#34;https://github.com/hashicorp/consul&#34;&gt;1&lt;/a&gt;,
&lt;a href=&#34;https://github.com/tendermint/tendermint&#34;&gt;2&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>