<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Debugging on Home on Rails</title>
    <link>http://homeonrails.com/tags/debugging/</link>
    <description>Recent content in Debugging on Home on Rails</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>All rights reserved</copyright>
    <lastBuildDate>Sat, 03 Mar 2018 13:47:11 +0400</lastBuildDate>
    
	<atom:link href="http://homeonrails.com/tags/debugging/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Choosing a type for blockchain height (beware of unsigned integers)</title>
      <link>http://homeonrails.com/2018/03/choosing-a-type-for-blockchain-height/</link>
      <pubDate>Sat, 03 Mar 2018 13:47:11 +0400</pubDate>
      
      <guid>http://homeonrails.com/2018/03/choosing-a-type-for-blockchain-height/</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was originally published on &lt;a href=&#34;https://medium.com/@anton.kalyaev/choosing-a-type-for-blockchain-height-beware-of-unsigned-integers-714804dddf1d&#34;&gt;Medium&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Before &lt;a href=&#34;https://github.com/tendermint/tendermint/pull/914&#34;&gt;this pull request&lt;/a&gt;,
it was a mess. ABCI was using a &lt;code&gt;uint64&lt;/code&gt; height on EndBlock. Tendermint Core
was using the same type for TxResult. Block and BlockStore, however, were using
&lt;code&gt;int&lt;/code&gt; heights (remember that &lt;code&gt;int&lt;/code&gt; is different depending on the processor
architecture: &lt;code&gt;int32&lt;/code&gt; for x86, &lt;code&gt;int64&lt;/code&gt; for amd64). There was no single standard
across our repositories as for what type to use for blockchain height.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Debugging the Memory Leak in Tendermint</title>
      <link>http://homeonrails.com/2018/03/debugging-the-memory-leak-in-tendermint/</link>
      <pubDate>Sat, 03 Mar 2018 13:20:11 +0400</pubDate>
      
      <guid>http://homeonrails.com/2018/03/debugging-the-memory-leak-in-tendermint/</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was originally published on &lt;a href=&#34;https://blog.cosmos.network/debugging-the-memory-leak-in-tendermint-210186711420&#34;&gt;Medium&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I have spent the last week looking for clues and writing test cases in order to
find and fix the memory leak in
&lt;a href=&#34;https://github.com/tendermint/tendermint/&#34;&gt;Tendermint&lt;/a&gt;. For those of you who
don’t know, Tendermint Core is a Byzantine Fault Tolerant (BFT) middleware that
takes a state transition machine — written in any programming language — and
securely replicates it on many machines. It is also the foundation of
&lt;a href=&#34;https://cosmos.network/&#34;&gt;Cosmos&lt;/a&gt; — our solution for scaling blockchains.&lt;/p&gt;

&lt;p&gt;Finding a memory leak in Go is not an easy task. However, there is a common set
of questions, answers to which will hopefully help you identify the source of a
leak. Here is the list:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Зависла Erlang нода. Что делать?</title>
      <link>http://homeonrails.com/2016/04/erlang-node-freezes-now-what/</link>
      <pubDate>Tue, 05 Apr 2016 15:50:31 +0000</pubDate>
      
      <guid>http://homeonrails.com/2016/04/erlang-node-freezes-now-what/</guid>
      <description>&lt;p&gt;&lt;img class=&#34;img-rounded&#34; src=&#34;http://homeonrails.com/images/posts/2016-04-05-erlang-node-freezes-now-what/debug_mode_on.jpg&#34; alt=&#34;&#34; width=&#34;100%&#34; title=&#34;&#34;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>