<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on Home on Rails</title>
    <link>http://homeonrails.com/tags/git/index.xml</link>
    <description>Recent content in Git on Home on Rails</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>All rights reserved - 2017</copyright>
    <atom:link href="http://homeonrails.com/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Почему стоит писать почему</title>
      <link>http://homeonrails.com/2014/04/why-should-i-write-why/</link>
      <pubDate>Tue, 15 Apr 2014 14:58:08 +0000</pubDate>
      
      <guid>http://homeonrails.com/2014/04/why-should-i-write-why/</guid>
      <description>&lt;p&gt;Раньше в сообщении к коммиту я ограничивался только ответом на вопрос
&amp;ldquo;Что?&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;commit 210a1f2df795bf49bfdd08e50d22ba80bac141f1
Author: Anton Kaliaev ...
Date:   Mon Apr 14 13:20:06 2014 +0400

    raise NoSlidesError if no slides
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Что сделали, то и пишем:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;добавили - added&lt;/li&gt;
&lt;li&gt;удалили - removed&lt;/li&gt;
&lt;li&gt;отрефакторили - refactored&lt;/li&gt;
&lt;li&gt;&amp;hellip; ну вы поняли.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Это позволяет быстро понять что было сделано в рамках данного коммита.&lt;/p&gt;

&lt;p&gt;Со временем я осознал, что у данного подхода есть один серьезный
минус - он не отвечает на вопрос &amp;ldquo;Почему это было сделано?&amp;rdquo;. Позже я
убедился, что в некоторых ситуациях &lt;strong&gt;это способно сильно осложнить
жизнь простому разработчику&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Рассмотрим случай выше. Непонятно почему мы бросаем исключение, а не
логгируем ошибку. Мы уже не можем быстро поменять данную
функциональность. Приходится самому додумывать причину. Словом &lt;strong&gt;при
отсутствии причины внесения изменений увеличивается стоимость поддержки
данного кода&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;commit 210a1f2df795bf49bfdd08e50d22ba80bac141f1
Author: Anton Kaliaev ...
Date:   Mon Apr 14 13:20:06 2014 +0400

    raise NoSlidesError if no slides

    This is exceptional situation because if there are no slides, layout
    looses it&#39;s meaning.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Теперь становится ясно, что в случае отсутствия слайдов лейаут теряет свой
смысл. Мы ожидаем, что будет присутствовать хотя бы один слайд.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Прошу вас, не вдавайтесь в терминологию предметной области. Для интересующихся
лишь отмечу, что исключение обрабатывается уровнем выше.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Еще пара советов:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;не используйте &lt;code&gt;git commit -m &amp;quot;&amp;quot;&lt;/code&gt;. Она(команда) принуждает вас писать короткие
сообщения (например, &amp;ldquo;fixed nil error&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;по возможности ссылайтесь на внешние источники информации (номер тикета,
ссылка на баг в Airbrake, ссылка на статью в интернете и т.п.)&lt;/li&gt;
&lt;li&gt;первая строка не должна быть длиннее 72 символов. Следующее после нее
расширенное описание может быть любой длинны. В качестве разделителя идет пустая
строка.&lt;/li&gt;
&lt;li&gt;если вы пользуетесь Vim, то можно добавить проверку правописания и ограничение
длины текста добавив это в ваш &lt;code&gt;~/.vimrc&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  autocmd Filetype gitcommit setlocal spell textwidth=72
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Полезные ссылки:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mislav.uniqpath.com/2014/02/hidden-documentation/&#34;&gt;Every line of code is always documented&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://robots.thoughtbot.com/5-useful-tips-for-a-better-commit-message&#34;&gt;5 Useful Tips For A Better Commit Message&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Отдельное спасибо &lt;a href=&#34;https://twitter.com/plugin73&#34;&gt;@plugin73&lt;/a&gt; и &lt;a href=&#34;https://twitter.com/SavelyevAndrey&#34;&gt;@SavelyevAndrey&lt;/a&gt; за ревью&lt;/em&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>10 команд, которыми вы пользуетесь чаще всего</title>
      <link>http://homeonrails.com/2013/07/top-10-commands-you-currently-use/</link>
      <pubDate>Sun, 28 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://homeonrails.com/2013/07/top-10-commands-you-currently-use/</guid>
      <description>&lt;p&gt;Порой, если вы активно пользуетесь командной строкой, вы начинаете
замечать, что набираете некоторые команды по многу раз. Неужели вам не
лень каждый раз набирать &lt;code&gt;vagrant up&lt;/code&gt; или &lt;code&gt;git checkout
feature/awesome-feature&lt;/code&gt;? Если да и вы стремитесь к повышению
продуктивности своей работы, то в командной оболочке linux есть отличное средство,
которое нам поможет - алиасы.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Сначала надо получить список наиболее часто используемых команд:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;history | awk &#39;{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] &amp;quot; &amp;quot; CMD[a]/count*100 &amp;quot;% &amp;quot; a;}&#39; | grep -v &amp;quot;./&amp;quot; | column -c3 -s &amp;quot; &amp;quot; -t | sort -nr | nl |  head -n10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;awk&lt;/code&gt; сохраняет команду и количество ее вхождений в
историю. Затем результат печатается, фильтруются скрипты вида
&lt;code&gt;./something&lt;/code&gt;, сортируется и обрезается до нужной длины.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://linux.byexamples.com/archives/332/what-is-your-10-common-linux-commands/&#34;&gt;Источник&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Пример вывода:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;13185  31.8532%   git
21430  14.3014%   gst
3706   7.301406071%   vim
4687   6.87069%   cd
5618   6.18062%   vagrant
6404   4.0404%    sudo
7252   2.52025%   tmux
8232   2.32023%   g
9197   1.9702%    ls
10190  1.90019%   gc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Основываясь на выводе выше, можно сказать что я очень часто пользуюсь
git, так что неплохо бы создать алиас для него и команд ниже.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;alias g=&amp;quot;git&amp;quot;
alias v=&amp;quot;vim&amp;quot;
alias l=&amp;quot;ls -al&amp;quot;
alias c=&amp;quot;git commit -m&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Мне очень нравятся однобуквенные алиасы. Хотя на многое их явно не
хватит.&lt;/p&gt;

&lt;p&gt;Также можно проанализировать только команды vagrant&amp;rsquo;а (subcommands) или любой
другой программы слегка модифицировав предыдущий скрипт:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;history|grep vagrant| awk &#39;{CMD[$3]++;count++;}END { for (a in CMD)print CMD[a] &amp;quot; &amp;quot; CMD[a]/count*100 &amp;quot;% &amp;quot; a;}&#39; | grep -v &amp;quot;./&amp;quot; | column -c3 -s &amp;quot; &amp;quot; -t | sort -nr | nl |  head -n10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Пример вывода:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1   193  23.9752%   ssh
2   166  20.6211%   up
3   98   12.1739%   halt
4   63   7.82609%   reload
5   37   4.59627%   destroy
6   31   3.85093%   TEAMOCIL=1;
7   18   2.23602%   provision
8   14   1.73913%   box
9   9    1.11801%   solo
10  8    0.993789%  -r
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Для vagrant мы заведем такой набор:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;alias v=&amp;quot;vagrant&amp;quot;
alias vst=&amp;quot;vagrant status&amp;quot;
alias vup=&amp;quot;vagrant up&amp;quot;
alias vpr=&amp;quot;vagrant provision&amp;quot;
alias vhl=&amp;quot;vagrant halt&amp;quot;
alias vre=&amp;quot;vagrant reload&amp;quot;
alias vssh=&amp;quot;vagrant ssh&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Если вы пользуетесь zsh, то рекомендую взглянуть на &lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh&#34;&gt;oh-my-zsh&lt;/a&gt;, которая
предлагает большое количесво плагинов с алиасами и автодополнением.
Конечно, они во многом избыточны (стоит хотя бы взглянуть на &lt;a href=&#34;http://jasonm23.github.io/oh-my-git-aliases.html&#34;&gt;список
команд плагина git&lt;/a&gt;), но если вас это устраивает, то можно смело их
использовать.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Как результат, мы повышаем продуктивность и, что немаловажно, снижаем нагрузку на наши
пальцы.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;P.S. очень рекомендую посмотреть доклад &lt;a href=&#34;http://www.youtube.com/watch?v=SkdrYWhh-8s&#34;&gt;Ben Orenstein - Write code faster: expert-level vim (Railsberry 2012)&lt;/a&gt;,
в котором Бен рассказывает очень правильные подходы в работе с vim&amp;rsquo;ом. Даже если вы не
пользуетесь vim&amp;rsquo;ом, многие вещи можно переложить на ваш любимый редактор, будь то Emacs, Sublime или любой другой.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>